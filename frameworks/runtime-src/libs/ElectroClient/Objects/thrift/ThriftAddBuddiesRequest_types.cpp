/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftAddBuddiesRequest_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftAddBuddiesRequest::~ThriftAddBuddiesRequest() throw() {
}


void ThriftAddBuddiesRequest::__set_buddyNames(const std::vector<std::string> & val) {
  this->buddyNames = val;
}

void ThriftAddBuddiesRequest::__set_esObject(const  ::es::ThriftFlattenedEsObject& val) {
  this->esObject = val;
}

void ThriftAddBuddiesRequest::__set_skipInitialLoggedOutEvents(const bool val) {
  this->skipInitialLoggedOutEvents = val;
}

uint32_t ThriftAddBuddiesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buddyNames.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->buddyNames.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->buddyNames[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buddyNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->esObject.read(iprot);
          this->__isset.esObject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->skipInitialLoggedOutEvents);
          this->__isset.skipInitialLoggedOutEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftAddBuddiesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftAddBuddiesRequest");

  xfer += oprot->writeFieldBegin("buddyNames", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->buddyNames.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->buddyNames.begin(); _iter5 != this->buddyNames.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("esObject", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->esObject.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skipInitialLoggedOutEvents", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->skipInitialLoggedOutEvents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftAddBuddiesRequest &a, ThriftAddBuddiesRequest &b) {
  using ::std::swap;
  swap(a.buddyNames, b.buddyNames);
  swap(a.esObject, b.esObject);
  swap(a.skipInitialLoggedOutEvents, b.skipInitialLoggedOutEvents);
  swap(a.__isset, b.__isset);
}

ThriftAddBuddiesRequest::ThriftAddBuddiesRequest(const ThriftAddBuddiesRequest& other6) {
  buddyNames = other6.buddyNames;
  esObject = other6.esObject;
  skipInitialLoggedOutEvents = other6.skipInitialLoggedOutEvents;
  __isset = other6.__isset;
}
ThriftAddBuddiesRequest& ThriftAddBuddiesRequest::operator=(const ThriftAddBuddiesRequest& other7) {
  buddyNames = other7.buddyNames;
  esObject = other7.esObject;
  skipInitialLoggedOutEvents = other7.skipInitialLoggedOutEvents;
  __isset = other7.__isset;
  return *this;
}
void ThriftAddBuddiesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftAddBuddiesRequest(";
  out << "buddyNames=" << to_string(buddyNames);
  out << ", " << "esObject=" << to_string(esObject);
  out << ", " << "skipInitialLoggedOutEvents=" << to_string(skipInitialLoggedOutEvents);
  out << ")";
}

} // namespace
