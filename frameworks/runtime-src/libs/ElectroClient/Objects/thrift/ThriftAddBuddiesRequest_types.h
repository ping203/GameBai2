/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftAddBuddiesRequest_TYPES_H
#define ThriftAddBuddiesRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"


namespace es {

class ThriftAddBuddiesRequest;

typedef struct _ThriftAddBuddiesRequest__isset {
  _ThriftAddBuddiesRequest__isset() : buddyNames(false), esObject(false), skipInitialLoggedOutEvents(false) {}
  bool buddyNames :1;
  bool esObject :1;
  bool skipInitialLoggedOutEvents :1;
} _ThriftAddBuddiesRequest__isset;

class ThriftAddBuddiesRequest {
 public:

  ThriftAddBuddiesRequest(const ThriftAddBuddiesRequest&);
  ThriftAddBuddiesRequest& operator=(const ThriftAddBuddiesRequest&);
  ThriftAddBuddiesRequest() : skipInitialLoggedOutEvents(0) {
  }

  virtual ~ThriftAddBuddiesRequest() throw();
  std::vector<std::string>  buddyNames;
   ::es::ThriftFlattenedEsObject esObject;
  bool skipInitialLoggedOutEvents;

  _ThriftAddBuddiesRequest__isset __isset;

  void __set_buddyNames(const std::vector<std::string> & val);

  void __set_esObject(const  ::es::ThriftFlattenedEsObject& val);

  void __set_skipInitialLoggedOutEvents(const bool val);

  bool operator == (const ThriftAddBuddiesRequest & rhs) const
  {
    if (!(buddyNames == rhs.buddyNames))
      return false;
    if (!(esObject == rhs.esObject))
      return false;
    if (!(skipInitialLoggedOutEvents == rhs.skipInitialLoggedOutEvents))
      return false;
    return true;
  }
  bool operator != (const ThriftAddBuddiesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftAddBuddiesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftAddBuddiesRequest &a, ThriftAddBuddiesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftAddBuddiesRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
