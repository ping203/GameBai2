/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftAddBuddiesResponse_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftAddBuddiesResponse::~ThriftAddBuddiesResponse() throw() {
}


void ThriftAddBuddiesResponse::__set_buddiesAdded(const std::vector<std::string> & val) {
  this->buddiesAdded = val;
}

void ThriftAddBuddiesResponse::__set_buddiesNotAdded(const std::vector<std::string> & val) {
  this->buddiesNotAdded = val;
}

uint32_t ThriftAddBuddiesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buddiesAdded.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->buddiesAdded.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->buddiesAdded[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buddiesAdded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buddiesNotAdded.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->buddiesNotAdded.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readString(this->buddiesNotAdded[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buddiesNotAdded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftAddBuddiesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftAddBuddiesResponse");

  xfer += oprot->writeFieldBegin("buddiesAdded", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->buddiesAdded.size()));
    std::vector<std::string> ::const_iterator _iter10;
    for (_iter10 = this->buddiesAdded.begin(); _iter10 != this->buddiesAdded.end(); ++_iter10)
    {
      xfer += oprot->writeString((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buddiesNotAdded", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->buddiesNotAdded.size()));
    std::vector<std::string> ::const_iterator _iter11;
    for (_iter11 = this->buddiesNotAdded.begin(); _iter11 != this->buddiesNotAdded.end(); ++_iter11)
    {
      xfer += oprot->writeString((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftAddBuddiesResponse &a, ThriftAddBuddiesResponse &b) {
  using ::std::swap;
  swap(a.buddiesAdded, b.buddiesAdded);
  swap(a.buddiesNotAdded, b.buddiesNotAdded);
  swap(a.__isset, b.__isset);
}

ThriftAddBuddiesResponse::ThriftAddBuddiesResponse(const ThriftAddBuddiesResponse& other12) {
  buddiesAdded = other12.buddiesAdded;
  buddiesNotAdded = other12.buddiesNotAdded;
  __isset = other12.__isset;
}
ThriftAddBuddiesResponse& ThriftAddBuddiesResponse::operator=(const ThriftAddBuddiesResponse& other13) {
  buddiesAdded = other13.buddiesAdded;
  buddiesNotAdded = other13.buddiesNotAdded;
  __isset = other13.__isset;
  return *this;
}
void ThriftAddBuddiesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftAddBuddiesResponse(";
  out << "buddiesAdded=" << to_string(buddiesAdded);
  out << ", " << "buddiesNotAdded=" << to_string(buddiesNotAdded);
  out << ")";
}

} // namespace
