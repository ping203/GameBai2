/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftAggregatePluginRequest_TYPES_H
#define ThriftAggregatePluginRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftRequestDetails_types.h"


namespace es {

class ThriftAggregatePluginRequest;

typedef struct _ThriftAggregatePluginRequest__isset {
  _ThriftAggregatePluginRequest__isset() : pluginRequestArray(false) {}
  bool pluginRequestArray :1;
} _ThriftAggregatePluginRequest__isset;

class ThriftAggregatePluginRequest {
 public:

  ThriftAggregatePluginRequest(const ThriftAggregatePluginRequest&);
  ThriftAggregatePluginRequest& operator=(const ThriftAggregatePluginRequest&);
  ThriftAggregatePluginRequest() {
  }

  virtual ~ThriftAggregatePluginRequest() throw();
  std::vector< ::es::ThriftRequestDetails>  pluginRequestArray;

  _ThriftAggregatePluginRequest__isset __isset;

  void __set_pluginRequestArray(const std::vector< ::es::ThriftRequestDetails> & val);

  bool operator == (const ThriftAggregatePluginRequest & rhs) const
  {
    if (!(pluginRequestArray == rhs.pluginRequestArray))
      return false;
    return true;
  }
  bool operator != (const ThriftAggregatePluginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftAggregatePluginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftAggregatePluginRequest &a, ThriftAggregatePluginRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftAggregatePluginRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
