/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftBuddyStatusUpdateEvent_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftBuddyStatusUpdateEvent::~ThriftBuddyStatusUpdateEvent() throw() {
}


void ThriftBuddyStatusUpdateEvent::__set_userName(const std::string& val) {
  this->userName = val;
}

void ThriftBuddyStatusUpdateEvent::__set_action(const  ::es::ThriftBuddyStatusUpdateAction::type val) {
  this->action = val;
}

void ThriftBuddyStatusUpdateEvent::__set_esObject(const  ::es::ThriftFlattenedEsObject& val) {
  this->esObject = val;
}

uint32_t ThriftBuddyStatusUpdateEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->action = ( ::es::ThriftBuddyStatusUpdateAction::type)ecast0;
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->esObject.read(iprot);
          this->__isset.esObject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftBuddyStatusUpdateEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftBuddyStatusUpdateEvent");

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->action);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("esObject", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->esObject.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftBuddyStatusUpdateEvent &a, ThriftBuddyStatusUpdateEvent &b) {
  using ::std::swap;
  swap(a.userName, b.userName);
  swap(a.action, b.action);
  swap(a.esObject, b.esObject);
  swap(a.__isset, b.__isset);
}

ThriftBuddyStatusUpdateEvent::ThriftBuddyStatusUpdateEvent(const ThriftBuddyStatusUpdateEvent& other1) {
  userName = other1.userName;
  action = other1.action;
  esObject = other1.esObject;
  __isset = other1.__isset;
}
ThriftBuddyStatusUpdateEvent& ThriftBuddyStatusUpdateEvent::operator=(const ThriftBuddyStatusUpdateEvent& other2) {
  userName = other2.userName;
  action = other2.action;
  esObject = other2.esObject;
  __isset = other2.__isset;
  return *this;
}
void ThriftBuddyStatusUpdateEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftBuddyStatusUpdateEvent(";
  out << "userName=" << to_string(userName);
  out << ", " << "action=" << to_string(action);
  out << ", " << "esObject=" << to_string(esObject);
  out << ")";
}

} // namespace
