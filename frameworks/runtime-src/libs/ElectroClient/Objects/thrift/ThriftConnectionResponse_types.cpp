/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftConnectionResponse_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftConnectionResponse::~ThriftConnectionResponse() throw() {
}


void ThriftConnectionResponse::__set_successful(const bool val) {
  this->successful = val;
}

void ThriftConnectionResponse::__set_hashId(const int32_t val) {
  this->hashId = val;
}

void ThriftConnectionResponse::__set_error(const  ::es::ThriftErrorType::type val) {
  this->error = val;
}

void ThriftConnectionResponse::__set_protocolConfiguration(const  ::es::ThriftProtocolConfiguration& val) {
  this->protocolConfiguration = val;
}

void ThriftConnectionResponse::__set_serverVersion(const std::string& val) {
  this->serverVersion = val;
}

uint32_t ThriftConnectionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->successful);
          this->__isset.successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hashId);
          this->__isset.hashId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->error = ( ::es::ThriftErrorType::type)ecast0;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->protocolConfiguration.read(iprot);
          this->__isset.protocolConfiguration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverVersion);
          this->__isset.serverVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftConnectionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftConnectionResponse");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->successful);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hashId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->hashId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("protocolConfiguration", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->protocolConfiguration.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverVersion", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->serverVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftConnectionResponse &a, ThriftConnectionResponse &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.hashId, b.hashId);
  swap(a.error, b.error);
  swap(a.protocolConfiguration, b.protocolConfiguration);
  swap(a.serverVersion, b.serverVersion);
  swap(a.__isset, b.__isset);
}

ThriftConnectionResponse::ThriftConnectionResponse(const ThriftConnectionResponse& other1) {
  successful = other1.successful;
  hashId = other1.hashId;
  error = other1.error;
  protocolConfiguration = other1.protocolConfiguration;
  serverVersion = other1.serverVersion;
  __isset = other1.__isset;
}
ThriftConnectionResponse& ThriftConnectionResponse::operator=(const ThriftConnectionResponse& other2) {
  successful = other2.successful;
  hashId = other2.hashId;
  error = other2.error;
  protocolConfiguration = other2.protocolConfiguration;
  serverVersion = other2.serverVersion;
  __isset = other2.__isset;
  return *this;
}
void ThriftConnectionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftConnectionResponse(";
  out << "successful=" << to_string(successful);
  out << ", " << "hashId=" << to_string(hashId);
  out << ", " << "error=" << to_string(error);
  out << ", " << "protocolConfiguration=" << to_string(protocolConfiguration);
  out << ", " << "serverVersion=" << to_string(serverVersion);
  out << ")";
}

} // namespace
