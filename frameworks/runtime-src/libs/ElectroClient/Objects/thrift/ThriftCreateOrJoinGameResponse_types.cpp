/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftCreateOrJoinGameResponse_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftCreateOrJoinGameResponse::~ThriftCreateOrJoinGameResponse() throw() {
}


void ThriftCreateOrJoinGameResponse::__set_successful(const bool val) {
  this->successful = val;
}

void ThriftCreateOrJoinGameResponse::__set_error(const  ::es::ThriftErrorType::type val) {
  this->error = val;
}

void ThriftCreateOrJoinGameResponse::__set_zoneId(const int32_t val) {
  this->zoneId = val;
}

void ThriftCreateOrJoinGameResponse::__set_roomId(const int32_t val) {
  this->roomId = val;
}

void ThriftCreateOrJoinGameResponse::__set_gameId(const int32_t val) {
  this->gameId = val;
}

void ThriftCreateOrJoinGameResponse::__set_gameDetails(const  ::es::ThriftFlattenedEsObjectRO& val) {
  this->gameDetails = val;
}

uint32_t ThriftCreateOrJoinGameResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->successful);
          this->__isset.successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->error = ( ::es::ThriftErrorType::type)ecast0;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gameId);
          this->__isset.gameId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gameDetails.read(iprot);
          this->__isset.gameDetails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftCreateOrJoinGameResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftCreateOrJoinGameResponse");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->successful);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->zoneId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->roomId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gameId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->gameId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gameDetails", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->gameDetails.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftCreateOrJoinGameResponse &a, ThriftCreateOrJoinGameResponse &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.error, b.error);
  swap(a.zoneId, b.zoneId);
  swap(a.roomId, b.roomId);
  swap(a.gameId, b.gameId);
  swap(a.gameDetails, b.gameDetails);
  swap(a.__isset, b.__isset);
}

ThriftCreateOrJoinGameResponse::ThriftCreateOrJoinGameResponse(const ThriftCreateOrJoinGameResponse& other1) {
  successful = other1.successful;
  error = other1.error;
  zoneId = other1.zoneId;
  roomId = other1.roomId;
  gameId = other1.gameId;
  gameDetails = other1.gameDetails;
  __isset = other1.__isset;
}
ThriftCreateOrJoinGameResponse& ThriftCreateOrJoinGameResponse::operator=(const ThriftCreateOrJoinGameResponse& other2) {
  successful = other2.successful;
  error = other2.error;
  zoneId = other2.zoneId;
  roomId = other2.roomId;
  gameId = other2.gameId;
  gameDetails = other2.gameDetails;
  __isset = other2.__isset;
  return *this;
}
void ThriftCreateOrJoinGameResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftCreateOrJoinGameResponse(";
  out << "successful=" << to_string(successful);
  out << ", " << "error=" << to_string(error);
  out << ", " << "zoneId=" << to_string(zoneId);
  out << ", " << "roomId=" << to_string(roomId);
  out << ", " << "gameId=" << to_string(gameId);
  out << ", " << "gameDetails=" << to_string(gameDetails);
  out << ")";
}

} // namespace
