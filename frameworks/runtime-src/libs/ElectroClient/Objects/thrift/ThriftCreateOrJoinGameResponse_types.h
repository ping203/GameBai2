/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftCreateOrJoinGameResponse_TYPES_H
#define ThriftCreateOrJoinGameResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObjectRO_types.h"
#include "ThriftErrorType_types.h"


namespace es {

class ThriftCreateOrJoinGameResponse;

typedef struct _ThriftCreateOrJoinGameResponse__isset {
  _ThriftCreateOrJoinGameResponse__isset() : successful(false), error(false), zoneId(false), roomId(false), gameId(false), gameDetails(false) {}
  bool successful :1;
  bool error :1;
  bool zoneId :1;
  bool roomId :1;
  bool gameId :1;
  bool gameDetails :1;
} _ThriftCreateOrJoinGameResponse__isset;

class ThriftCreateOrJoinGameResponse {
 public:

  ThriftCreateOrJoinGameResponse(const ThriftCreateOrJoinGameResponse&);
  ThriftCreateOrJoinGameResponse& operator=(const ThriftCreateOrJoinGameResponse&);
  ThriftCreateOrJoinGameResponse() : successful(0), error(( ::es::ThriftErrorType::type)0), zoneId(0), roomId(0), gameId(0) {
  }

  virtual ~ThriftCreateOrJoinGameResponse() throw();
  bool successful;
   ::es::ThriftErrorType::type error;
  int32_t zoneId;
  int32_t roomId;
  int32_t gameId;
   ::es::ThriftFlattenedEsObjectRO gameDetails;

  _ThriftCreateOrJoinGameResponse__isset __isset;

  void __set_successful(const bool val);

  void __set_error(const  ::es::ThriftErrorType::type val);

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_gameId(const int32_t val);

  void __set_gameDetails(const  ::es::ThriftFlattenedEsObjectRO& val);

  bool operator == (const ThriftCreateOrJoinGameResponse & rhs) const
  {
    if (!(successful == rhs.successful))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(zoneId == rhs.zoneId))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    if (!(gameId == rhs.gameId))
      return false;
    if (!(gameDetails == rhs.gameDetails))
      return false;
    return true;
  }
  bool operator != (const ThriftCreateOrJoinGameResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftCreateOrJoinGameResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftCreateOrJoinGameResponse &a, ThriftCreateOrJoinGameResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftCreateOrJoinGameResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
