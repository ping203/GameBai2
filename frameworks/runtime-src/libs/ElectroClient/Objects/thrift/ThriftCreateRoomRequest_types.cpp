/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftCreateRoomRequest_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftCreateRoomRequest::~ThriftCreateRoomRequest() throw() {
}


void ThriftCreateRoomRequest::__set_zoneName(const std::string& val) {
  this->zoneName = val;
}

void ThriftCreateRoomRequest::__set_zoneId(const int32_t val) {
  this->zoneId = val;
}

void ThriftCreateRoomRequest::__set_roomName(const std::string& val) {
  this->roomName = val;
}

void ThriftCreateRoomRequest::__set_capacity(const int32_t val) {
  this->capacity = val;
}

void ThriftCreateRoomRequest::__set_password(const std::string& val) {
  this->password = val;
}

void ThriftCreateRoomRequest::__set_roomDescription(const std::string& val) {
  this->roomDescription = val;
}

void ThriftCreateRoomRequest::__set_persistent(const bool val) {
  this->persistent = val;
}

void ThriftCreateRoomRequest::__set_hidden(const bool val) {
  this->hidden = val;
}

void ThriftCreateRoomRequest::__set_receivingRoomListUpdates(const bool val) {
  this->receivingRoomListUpdates = val;
}

void ThriftCreateRoomRequest::__set_receivingRoomAttributeUpdates(const bool val) {
  this->receivingRoomAttributeUpdates = val;
}

void ThriftCreateRoomRequest::__set_receivingUserListUpdates(const bool val) {
  this->receivingUserListUpdates = val;
}

void ThriftCreateRoomRequest::__set_receivingUserVariableUpdates(const bool val) {
  this->receivingUserVariableUpdates = val;
}

void ThriftCreateRoomRequest::__set_receivingRoomVariableUpdates(const bool val) {
  this->receivingRoomVariableUpdates = val;
}

void ThriftCreateRoomRequest::__set_receivingVideoEvents(const bool val) {
  this->receivingVideoEvents = val;
}

void ThriftCreateRoomRequest::__set_nonOperatorUpdateAllowed(const bool val) {
  this->nonOperatorUpdateAllowed = val;
}

void ThriftCreateRoomRequest::__set_nonOperatorVariableUpdateAllowed(const bool val) {
  this->nonOperatorVariableUpdateAllowed = val;
}

void ThriftCreateRoomRequest::__set_createOrJoinRoom(const bool val) {
  this->createOrJoinRoom = val;
}

void ThriftCreateRoomRequest::__set_plugins(const std::vector< ::es::ThriftPluginListEntry> & val) {
  this->plugins = val;
}

void ThriftCreateRoomRequest::__set_variables(const std::vector< ::es::ThriftRoomVariable> & val) {
  this->variables = val;
}

void ThriftCreateRoomRequest::__set_usingLanguageFilter(const bool val) {
  this->usingLanguageFilter = val;
}

void ThriftCreateRoomRequest::__set_languageFilterSpecified(const bool val) {
  this->languageFilterSpecified = val;
}

void ThriftCreateRoomRequest::__set_languageFilterName(const std::string& val) {
  this->languageFilterName = val;
}

void ThriftCreateRoomRequest::__set_languageFilterDeliverMessageOnFailure(const bool val) {
  this->languageFilterDeliverMessageOnFailure = val;
}

void ThriftCreateRoomRequest::__set_languageFilterFailuresBeforeKick(const int32_t val) {
  this->languageFilterFailuresBeforeKick = val;
}

void ThriftCreateRoomRequest::__set_languageFilterKicksBeforeBan(const int32_t val) {
  this->languageFilterKicksBeforeBan = val;
}

void ThriftCreateRoomRequest::__set_languageFilterBanDuration(const int32_t val) {
  this->languageFilterBanDuration = val;
}

void ThriftCreateRoomRequest::__set_languageFilterResetAfterKick(const bool val) {
  this->languageFilterResetAfterKick = val;
}

void ThriftCreateRoomRequest::__set_usingFloodingFilter(const bool val) {
  this->usingFloodingFilter = val;
}

void ThriftCreateRoomRequest::__set_floodingFilterSpecified(const bool val) {
  this->floodingFilterSpecified = val;
}

void ThriftCreateRoomRequest::__set_floodingFilterName(const std::string& val) {
  this->floodingFilterName = val;
}

void ThriftCreateRoomRequest::__set_floodingFilterFailuresBeforeKick(const int32_t val) {
  this->floodingFilterFailuresBeforeKick = val;
}

void ThriftCreateRoomRequest::__set_floodingFilterKicksBeforeBan(const int32_t val) {
  this->floodingFilterKicksBeforeBan = val;
}

void ThriftCreateRoomRequest::__set_floodingFilterBanDuration(const int32_t val) {
  this->floodingFilterBanDuration = val;
}

void ThriftCreateRoomRequest::__set_floodingFilterResetAfterKick(const bool val) {
  this->floodingFilterResetAfterKick = val;
}

uint32_t ThriftCreateRoomRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomName);
          this->__isset.roomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->capacity);
          this->__isset.capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomDescription);
          this->__isset.roomDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->persistent);
          this->__isset.persistent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hidden);
          this->__isset.hidden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingRoomListUpdates);
          this->__isset.receivingRoomListUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingRoomAttributeUpdates);
          this->__isset.receivingRoomAttributeUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingUserListUpdates);
          this->__isset.receivingUserListUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingUserVariableUpdates);
          this->__isset.receivingUserVariableUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingRoomVariableUpdates);
          this->__isset.receivingRoomVariableUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingVideoEvents);
          this->__isset.receivingVideoEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->nonOperatorUpdateAllowed);
          this->__isset.nonOperatorUpdateAllowed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->nonOperatorVariableUpdateAllowed);
          this->__isset.nonOperatorVariableUpdateAllowed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->createOrJoinRoom);
          this->__isset.createOrJoinRoom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->plugins.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->plugins.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->plugins[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.plugins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->variables.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->variables.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->variables[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.variables = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->usingLanguageFilter);
          this->__isset.usingLanguageFilter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->languageFilterSpecified);
          this->__isset.languageFilterSpecified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->languageFilterName);
          this->__isset.languageFilterName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->languageFilterDeliverMessageOnFailure);
          this->__isset.languageFilterDeliverMessageOnFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->languageFilterFailuresBeforeKick);
          this->__isset.languageFilterFailuresBeforeKick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->languageFilterKicksBeforeBan);
          this->__isset.languageFilterKicksBeforeBan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->languageFilterBanDuration);
          this->__isset.languageFilterBanDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->languageFilterResetAfterKick);
          this->__isset.languageFilterResetAfterKick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->usingFloodingFilter);
          this->__isset.usingFloodingFilter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->floodingFilterSpecified);
          this->__isset.floodingFilterSpecified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->floodingFilterName);
          this->__isset.floodingFilterName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->floodingFilterFailuresBeforeKick);
          this->__isset.floodingFilterFailuresBeforeKick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->floodingFilterKicksBeforeBan);
          this->__isset.floodingFilterKicksBeforeBan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->floodingFilterBanDuration);
          this->__isset.floodingFilterBanDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->floodingFilterResetAfterKick);
          this->__isset.floodingFilterResetAfterKick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftCreateRoomRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftCreateRoomRequest");

  xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->zoneName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->zoneId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->roomName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capacity", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomDescription", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->roomDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("persistent", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->persistent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->hidden);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receivingRoomListUpdates", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->receivingRoomListUpdates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receivingRoomAttributeUpdates", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->receivingRoomAttributeUpdates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receivingUserListUpdates", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->receivingUserListUpdates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receivingUserVariableUpdates", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->receivingUserVariableUpdates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receivingRoomVariableUpdates", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->receivingRoomVariableUpdates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receivingVideoEvents", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->receivingVideoEvents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nonOperatorUpdateAllowed", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->nonOperatorUpdateAllowed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nonOperatorVariableUpdateAllowed", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->nonOperatorVariableUpdateAllowed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createOrJoinRoom", ::apache::thrift::protocol::T_BOOL, 17);
  xfer += oprot->writeBool(this->createOrJoinRoom);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plugins", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->plugins.size()));
    std::vector< ::es::ThriftPluginListEntry> ::const_iterator _iter10;
    for (_iter10 = this->plugins.begin(); _iter10 != this->plugins.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("variables", ::apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->variables.size()));
    std::vector< ::es::ThriftRoomVariable> ::const_iterator _iter11;
    for (_iter11 = this->variables.begin(); _iter11 != this->variables.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usingLanguageFilter", ::apache::thrift::protocol::T_BOOL, 20);
  xfer += oprot->writeBool(this->usingLanguageFilter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languageFilterSpecified", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->languageFilterSpecified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languageFilterName", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->languageFilterName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languageFilterDeliverMessageOnFailure", ::apache::thrift::protocol::T_BOOL, 23);
  xfer += oprot->writeBool(this->languageFilterDeliverMessageOnFailure);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languageFilterFailuresBeforeKick", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->languageFilterFailuresBeforeKick);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languageFilterKicksBeforeBan", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->languageFilterKicksBeforeBan);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languageFilterBanDuration", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->languageFilterBanDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("languageFilterResetAfterKick", ::apache::thrift::protocol::T_BOOL, 27);
  xfer += oprot->writeBool(this->languageFilterResetAfterKick);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usingFloodingFilter", ::apache::thrift::protocol::T_BOOL, 28);
  xfer += oprot->writeBool(this->usingFloodingFilter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floodingFilterSpecified", ::apache::thrift::protocol::T_BOOL, 29);
  xfer += oprot->writeBool(this->floodingFilterSpecified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floodingFilterName", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->floodingFilterName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floodingFilterFailuresBeforeKick", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32(this->floodingFilterFailuresBeforeKick);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floodingFilterKicksBeforeBan", ::apache::thrift::protocol::T_I32, 32);
  xfer += oprot->writeI32(this->floodingFilterKicksBeforeBan);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floodingFilterBanDuration", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->floodingFilterBanDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floodingFilterResetAfterKick", ::apache::thrift::protocol::T_BOOL, 34);
  xfer += oprot->writeBool(this->floodingFilterResetAfterKick);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftCreateRoomRequest &a, ThriftCreateRoomRequest &b) {
  using ::std::swap;
  swap(a.zoneName, b.zoneName);
  swap(a.zoneId, b.zoneId);
  swap(a.roomName, b.roomName);
  swap(a.capacity, b.capacity);
  swap(a.password, b.password);
  swap(a.roomDescription, b.roomDescription);
  swap(a.persistent, b.persistent);
  swap(a.hidden, b.hidden);
  swap(a.receivingRoomListUpdates, b.receivingRoomListUpdates);
  swap(a.receivingRoomAttributeUpdates, b.receivingRoomAttributeUpdates);
  swap(a.receivingUserListUpdates, b.receivingUserListUpdates);
  swap(a.receivingUserVariableUpdates, b.receivingUserVariableUpdates);
  swap(a.receivingRoomVariableUpdates, b.receivingRoomVariableUpdates);
  swap(a.receivingVideoEvents, b.receivingVideoEvents);
  swap(a.nonOperatorUpdateAllowed, b.nonOperatorUpdateAllowed);
  swap(a.nonOperatorVariableUpdateAllowed, b.nonOperatorVariableUpdateAllowed);
  swap(a.createOrJoinRoom, b.createOrJoinRoom);
  swap(a.plugins, b.plugins);
  swap(a.variables, b.variables);
  swap(a.usingLanguageFilter, b.usingLanguageFilter);
  swap(a.languageFilterSpecified, b.languageFilterSpecified);
  swap(a.languageFilterName, b.languageFilterName);
  swap(a.languageFilterDeliverMessageOnFailure, b.languageFilterDeliverMessageOnFailure);
  swap(a.languageFilterFailuresBeforeKick, b.languageFilterFailuresBeforeKick);
  swap(a.languageFilterKicksBeforeBan, b.languageFilterKicksBeforeBan);
  swap(a.languageFilterBanDuration, b.languageFilterBanDuration);
  swap(a.languageFilterResetAfterKick, b.languageFilterResetAfterKick);
  swap(a.usingFloodingFilter, b.usingFloodingFilter);
  swap(a.floodingFilterSpecified, b.floodingFilterSpecified);
  swap(a.floodingFilterName, b.floodingFilterName);
  swap(a.floodingFilterFailuresBeforeKick, b.floodingFilterFailuresBeforeKick);
  swap(a.floodingFilterKicksBeforeBan, b.floodingFilterKicksBeforeBan);
  swap(a.floodingFilterBanDuration, b.floodingFilterBanDuration);
  swap(a.floodingFilterResetAfterKick, b.floodingFilterResetAfterKick);
  swap(a.__isset, b.__isset);
}

ThriftCreateRoomRequest::ThriftCreateRoomRequest(const ThriftCreateRoomRequest& other12) {
  zoneName = other12.zoneName;
  zoneId = other12.zoneId;
  roomName = other12.roomName;
  capacity = other12.capacity;
  password = other12.password;
  roomDescription = other12.roomDescription;
  persistent = other12.persistent;
  hidden = other12.hidden;
  receivingRoomListUpdates = other12.receivingRoomListUpdates;
  receivingRoomAttributeUpdates = other12.receivingRoomAttributeUpdates;
  receivingUserListUpdates = other12.receivingUserListUpdates;
  receivingUserVariableUpdates = other12.receivingUserVariableUpdates;
  receivingRoomVariableUpdates = other12.receivingRoomVariableUpdates;
  receivingVideoEvents = other12.receivingVideoEvents;
  nonOperatorUpdateAllowed = other12.nonOperatorUpdateAllowed;
  nonOperatorVariableUpdateAllowed = other12.nonOperatorVariableUpdateAllowed;
  createOrJoinRoom = other12.createOrJoinRoom;
  plugins = other12.plugins;
  variables = other12.variables;
  usingLanguageFilter = other12.usingLanguageFilter;
  languageFilterSpecified = other12.languageFilterSpecified;
  languageFilterName = other12.languageFilterName;
  languageFilterDeliverMessageOnFailure = other12.languageFilterDeliverMessageOnFailure;
  languageFilterFailuresBeforeKick = other12.languageFilterFailuresBeforeKick;
  languageFilterKicksBeforeBan = other12.languageFilterKicksBeforeBan;
  languageFilterBanDuration = other12.languageFilterBanDuration;
  languageFilterResetAfterKick = other12.languageFilterResetAfterKick;
  usingFloodingFilter = other12.usingFloodingFilter;
  floodingFilterSpecified = other12.floodingFilterSpecified;
  floodingFilterName = other12.floodingFilterName;
  floodingFilterFailuresBeforeKick = other12.floodingFilterFailuresBeforeKick;
  floodingFilterKicksBeforeBan = other12.floodingFilterKicksBeforeBan;
  floodingFilterBanDuration = other12.floodingFilterBanDuration;
  floodingFilterResetAfterKick = other12.floodingFilterResetAfterKick;
  __isset = other12.__isset;
}
ThriftCreateRoomRequest& ThriftCreateRoomRequest::operator=(const ThriftCreateRoomRequest& other13) {
  zoneName = other13.zoneName;
  zoneId = other13.zoneId;
  roomName = other13.roomName;
  capacity = other13.capacity;
  password = other13.password;
  roomDescription = other13.roomDescription;
  persistent = other13.persistent;
  hidden = other13.hidden;
  receivingRoomListUpdates = other13.receivingRoomListUpdates;
  receivingRoomAttributeUpdates = other13.receivingRoomAttributeUpdates;
  receivingUserListUpdates = other13.receivingUserListUpdates;
  receivingUserVariableUpdates = other13.receivingUserVariableUpdates;
  receivingRoomVariableUpdates = other13.receivingRoomVariableUpdates;
  receivingVideoEvents = other13.receivingVideoEvents;
  nonOperatorUpdateAllowed = other13.nonOperatorUpdateAllowed;
  nonOperatorVariableUpdateAllowed = other13.nonOperatorVariableUpdateAllowed;
  createOrJoinRoom = other13.createOrJoinRoom;
  plugins = other13.plugins;
  variables = other13.variables;
  usingLanguageFilter = other13.usingLanguageFilter;
  languageFilterSpecified = other13.languageFilterSpecified;
  languageFilterName = other13.languageFilterName;
  languageFilterDeliverMessageOnFailure = other13.languageFilterDeliverMessageOnFailure;
  languageFilterFailuresBeforeKick = other13.languageFilterFailuresBeforeKick;
  languageFilterKicksBeforeBan = other13.languageFilterKicksBeforeBan;
  languageFilterBanDuration = other13.languageFilterBanDuration;
  languageFilterResetAfterKick = other13.languageFilterResetAfterKick;
  usingFloodingFilter = other13.usingFloodingFilter;
  floodingFilterSpecified = other13.floodingFilterSpecified;
  floodingFilterName = other13.floodingFilterName;
  floodingFilterFailuresBeforeKick = other13.floodingFilterFailuresBeforeKick;
  floodingFilterKicksBeforeBan = other13.floodingFilterKicksBeforeBan;
  floodingFilterBanDuration = other13.floodingFilterBanDuration;
  floodingFilterResetAfterKick = other13.floodingFilterResetAfterKick;
  __isset = other13.__isset;
  return *this;
}
void ThriftCreateRoomRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftCreateRoomRequest(";
  out << "zoneName=" << to_string(zoneName);
  out << ", " << "zoneId=" << to_string(zoneId);
  out << ", " << "roomName=" << to_string(roomName);
  out << ", " << "capacity=" << to_string(capacity);
  out << ", " << "password=" << to_string(password);
  out << ", " << "roomDescription=" << to_string(roomDescription);
  out << ", " << "persistent=" << to_string(persistent);
  out << ", " << "hidden=" << to_string(hidden);
  out << ", " << "receivingRoomListUpdates=" << to_string(receivingRoomListUpdates);
  out << ", " << "receivingRoomAttributeUpdates=" << to_string(receivingRoomAttributeUpdates);
  out << ", " << "receivingUserListUpdates=" << to_string(receivingUserListUpdates);
  out << ", " << "receivingUserVariableUpdates=" << to_string(receivingUserVariableUpdates);
  out << ", " << "receivingRoomVariableUpdates=" << to_string(receivingRoomVariableUpdates);
  out << ", " << "receivingVideoEvents=" << to_string(receivingVideoEvents);
  out << ", " << "nonOperatorUpdateAllowed=" << to_string(nonOperatorUpdateAllowed);
  out << ", " << "nonOperatorVariableUpdateAllowed=" << to_string(nonOperatorVariableUpdateAllowed);
  out << ", " << "createOrJoinRoom=" << to_string(createOrJoinRoom);
  out << ", " << "plugins=" << to_string(plugins);
  out << ", " << "variables=" << to_string(variables);
  out << ", " << "usingLanguageFilter=" << to_string(usingLanguageFilter);
  out << ", " << "languageFilterSpecified=" << to_string(languageFilterSpecified);
  out << ", " << "languageFilterName=" << to_string(languageFilterName);
  out << ", " << "languageFilterDeliverMessageOnFailure=" << to_string(languageFilterDeliverMessageOnFailure);
  out << ", " << "languageFilterFailuresBeforeKick=" << to_string(languageFilterFailuresBeforeKick);
  out << ", " << "languageFilterKicksBeforeBan=" << to_string(languageFilterKicksBeforeBan);
  out << ", " << "languageFilterBanDuration=" << to_string(languageFilterBanDuration);
  out << ", " << "languageFilterResetAfterKick=" << to_string(languageFilterResetAfterKick);
  out << ", " << "usingFloodingFilter=" << to_string(usingFloodingFilter);
  out << ", " << "floodingFilterSpecified=" << to_string(floodingFilterSpecified);
  out << ", " << "floodingFilterName=" << to_string(floodingFilterName);
  out << ", " << "floodingFilterFailuresBeforeKick=" << to_string(floodingFilterFailuresBeforeKick);
  out << ", " << "floodingFilterKicksBeforeBan=" << to_string(floodingFilterKicksBeforeBan);
  out << ", " << "floodingFilterBanDuration=" << to_string(floodingFilterBanDuration);
  out << ", " << "floodingFilterResetAfterKick=" << to_string(floodingFilterResetAfterKick);
  out << ")";
}

} // namespace
