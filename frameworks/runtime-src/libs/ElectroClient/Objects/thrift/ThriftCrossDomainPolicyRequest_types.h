/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftCrossDomainPolicyRequest_TYPES_H
#define ThriftCrossDomainPolicyRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"


namespace es {

class ThriftCrossDomainPolicyRequest;


class ThriftCrossDomainPolicyRequest {
 public:

  ThriftCrossDomainPolicyRequest(const ThriftCrossDomainPolicyRequest&);
  ThriftCrossDomainPolicyRequest& operator=(const ThriftCrossDomainPolicyRequest&);
  ThriftCrossDomainPolicyRequest() {
  }

  virtual ~ThriftCrossDomainPolicyRequest() throw();

  bool operator == (const ThriftCrossDomainPolicyRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftCrossDomainPolicyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftCrossDomainPolicyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftCrossDomainPolicyRequest &a, ThriftCrossDomainPolicyRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftCrossDomainPolicyRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
