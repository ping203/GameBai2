/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftCrossDomainPolicyResponse_TYPES_H
#define ThriftCrossDomainPolicyResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftCrossDomainPolicyResponse;

typedef struct _ThriftCrossDomainPolicyResponse__isset {
  _ThriftCrossDomainPolicyResponse__isset() : customFileEnabled(false), customFileContents(false), port(false) {}
  bool customFileEnabled :1;
  bool customFileContents :1;
  bool port :1;
} _ThriftCrossDomainPolicyResponse__isset;

class ThriftCrossDomainPolicyResponse {
 public:

  ThriftCrossDomainPolicyResponse(const ThriftCrossDomainPolicyResponse&);
  ThriftCrossDomainPolicyResponse& operator=(const ThriftCrossDomainPolicyResponse&);
  ThriftCrossDomainPolicyResponse() : customFileEnabled(0), customFileContents(), port(0) {
  }

  virtual ~ThriftCrossDomainPolicyResponse() throw();
  bool customFileEnabled;
  std::string customFileContents;
  int32_t port;

  _ThriftCrossDomainPolicyResponse__isset __isset;

  void __set_customFileEnabled(const bool val);

  void __set_customFileContents(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const ThriftCrossDomainPolicyResponse & rhs) const
  {
    if (!(customFileEnabled == rhs.customFileEnabled))
      return false;
    if (!(customFileContents == rhs.customFileContents))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const ThriftCrossDomainPolicyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftCrossDomainPolicyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftCrossDomainPolicyResponse &a, ThriftCrossDomainPolicyResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftCrossDomainPolicyResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
