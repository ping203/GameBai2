/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftDHPublicNumbersResponse_TYPES_H
#define ThriftDHPublicNumbersResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftDHPublicNumbersResponse;

typedef struct _ThriftDHPublicNumbersResponse__isset {
  _ThriftDHPublicNumbersResponse__isset() : baseNumber(false), primeNumber(false) {}
  bool baseNumber :1;
  bool primeNumber :1;
} _ThriftDHPublicNumbersResponse__isset;

class ThriftDHPublicNumbersResponse {
 public:

  ThriftDHPublicNumbersResponse(const ThriftDHPublicNumbersResponse&);
  ThriftDHPublicNumbersResponse& operator=(const ThriftDHPublicNumbersResponse&);
  ThriftDHPublicNumbersResponse() : baseNumber(), primeNumber() {
  }

  virtual ~ThriftDHPublicNumbersResponse() throw();
  std::string baseNumber;
  std::string primeNumber;

  _ThriftDHPublicNumbersResponse__isset __isset;

  void __set_baseNumber(const std::string& val);

  void __set_primeNumber(const std::string& val);

  bool operator == (const ThriftDHPublicNumbersResponse & rhs) const
  {
    if (!(baseNumber == rhs.baseNumber))
      return false;
    if (!(primeNumber == rhs.primeNumber))
      return false;
    return true;
  }
  bool operator != (const ThriftDHPublicNumbersResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftDHPublicNumbersResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftDHPublicNumbersResponse &a, ThriftDHPublicNumbersResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftDHPublicNumbersResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
