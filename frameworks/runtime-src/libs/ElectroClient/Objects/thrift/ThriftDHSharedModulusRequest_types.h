/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftDHSharedModulusRequest_TYPES_H
#define ThriftDHSharedModulusRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftDHSharedModulusRequest;

typedef struct _ThriftDHSharedModulusRequest__isset {
  _ThriftDHSharedModulusRequest__isset() : number(false) {}
  bool number :1;
} _ThriftDHSharedModulusRequest__isset;

class ThriftDHSharedModulusRequest {
 public:

  ThriftDHSharedModulusRequest(const ThriftDHSharedModulusRequest&);
  ThriftDHSharedModulusRequest& operator=(const ThriftDHSharedModulusRequest&);
  ThriftDHSharedModulusRequest() : number() {
  }

  virtual ~ThriftDHSharedModulusRequest() throw();
  std::string number;

  _ThriftDHSharedModulusRequest__isset __isset;

  void __set_number(const std::string& val);

  bool operator == (const ThriftDHSharedModulusRequest & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const ThriftDHSharedModulusRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftDHSharedModulusRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftDHSharedModulusRequest &a, ThriftDHSharedModulusRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftDHSharedModulusRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
