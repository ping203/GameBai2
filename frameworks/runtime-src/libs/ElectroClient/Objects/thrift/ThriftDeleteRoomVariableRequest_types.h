/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftDeleteRoomVariableRequest_TYPES_H
#define ThriftDeleteRoomVariableRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"


namespace es {

class ThriftDeleteRoomVariableRequest;

typedef struct _ThriftDeleteRoomVariableRequest__isset {
  _ThriftDeleteRoomVariableRequest__isset() : zoneId(false), roomId(false), name(false) {}
  bool zoneId :1;
  bool roomId :1;
  bool name :1;
} _ThriftDeleteRoomVariableRequest__isset;

class ThriftDeleteRoomVariableRequest {
 public:

  ThriftDeleteRoomVariableRequest(const ThriftDeleteRoomVariableRequest&);
  ThriftDeleteRoomVariableRequest& operator=(const ThriftDeleteRoomVariableRequest&);
  ThriftDeleteRoomVariableRequest() : zoneId(0), roomId(0), name() {
  }

  virtual ~ThriftDeleteRoomVariableRequest() throw();
  int32_t zoneId;
  int32_t roomId;
  std::string name;

  _ThriftDeleteRoomVariableRequest__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_name(const std::string& val);

  bool operator == (const ThriftDeleteRoomVariableRequest & rhs) const
  {
    if (!(zoneId == rhs.zoneId))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ThriftDeleteRoomVariableRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftDeleteRoomVariableRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftDeleteRoomVariableRequest &a, ThriftDeleteRoomVariableRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftDeleteRoomVariableRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
