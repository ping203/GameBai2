/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftDeleteUserVariableRequest_TYPES_H
#define ThriftDeleteUserVariableRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftDeleteUserVariableRequest;

typedef struct _ThriftDeleteUserVariableRequest__isset {
  _ThriftDeleteUserVariableRequest__isset() : name(false) {}
  bool name :1;
} _ThriftDeleteUserVariableRequest__isset;

class ThriftDeleteUserVariableRequest {
 public:

  ThriftDeleteUserVariableRequest(const ThriftDeleteUserVariableRequest&);
  ThriftDeleteUserVariableRequest& operator=(const ThriftDeleteUserVariableRequest&);
  ThriftDeleteUserVariableRequest() : name() {
  }

  virtual ~ThriftDeleteUserVariableRequest() throw();
  std::string name;

  _ThriftDeleteUserVariableRequest__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const ThriftDeleteUserVariableRequest & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ThriftDeleteUserVariableRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftDeleteUserVariableRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftDeleteUserVariableRequest &a, ThriftDeleteUserVariableRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftDeleteUserVariableRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
