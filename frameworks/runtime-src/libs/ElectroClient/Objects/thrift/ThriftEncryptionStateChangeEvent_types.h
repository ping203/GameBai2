/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftEncryptionStateChangeEvent_TYPES_H
#define ThriftEncryptionStateChangeEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftEncryptionStateChangeEvent;

typedef struct _ThriftEncryptionStateChangeEvent__isset {
  _ThriftEncryptionStateChangeEvent__isset() : encryptionOn(false) {}
  bool encryptionOn :1;
} _ThriftEncryptionStateChangeEvent__isset;

class ThriftEncryptionStateChangeEvent {
 public:

  ThriftEncryptionStateChangeEvent(const ThriftEncryptionStateChangeEvent&);
  ThriftEncryptionStateChangeEvent& operator=(const ThriftEncryptionStateChangeEvent&);
  ThriftEncryptionStateChangeEvent() : encryptionOn(0) {
  }

  virtual ~ThriftEncryptionStateChangeEvent() throw();
  bool encryptionOn;

  _ThriftEncryptionStateChangeEvent__isset __isset;

  void __set_encryptionOn(const bool val);

  bool operator == (const ThriftEncryptionStateChangeEvent & rhs) const
  {
    if (!(encryptionOn == rhs.encryptionOn))
      return false;
    return true;
  }
  bool operator != (const ThriftEncryptionStateChangeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftEncryptionStateChangeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftEncryptionStateChangeEvent &a, ThriftEncryptionStateChangeEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftEncryptionStateChangeEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
