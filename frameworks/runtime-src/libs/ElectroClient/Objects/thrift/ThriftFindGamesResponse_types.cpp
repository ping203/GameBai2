/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftFindGamesResponse_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftFindGamesResponse::~ThriftFindGamesResponse() throw() {
}


void ThriftFindGamesResponse::__set_games(const std::vector< ::es::ThriftServerGame> & val) {
  this->games = val;
}

uint32_t ThriftFindGamesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->games.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->games.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->games[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.games = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftFindGamesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftFindGamesResponse");

  xfer += oprot->writeFieldBegin("games", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->games.size()));
    std::vector< ::es::ThriftServerGame> ::const_iterator _iter5;
    for (_iter5 = this->games.begin(); _iter5 != this->games.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftFindGamesResponse &a, ThriftFindGamesResponse &b) {
  using ::std::swap;
  swap(a.games, b.games);
  swap(a.__isset, b.__isset);
}

ThriftFindGamesResponse::ThriftFindGamesResponse(const ThriftFindGamesResponse& other6) {
  games = other6.games;
  __isset = other6.__isset;
}
ThriftFindGamesResponse& ThriftFindGamesResponse::operator=(const ThriftFindGamesResponse& other7) {
  games = other7.games;
  __isset = other7.__isset;
  return *this;
}
void ThriftFindGamesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftFindGamesResponse(";
  out << "games=" << to_string(games);
  out << ")";
}

} // namespace
