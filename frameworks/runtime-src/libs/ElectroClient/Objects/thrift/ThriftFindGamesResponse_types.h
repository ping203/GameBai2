/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftFindGamesResponse_TYPES_H
#define ThriftFindGamesResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"
#include "ThriftServerGame_types.h"


namespace es {

class ThriftFindGamesResponse;

typedef struct _ThriftFindGamesResponse__isset {
  _ThriftFindGamesResponse__isset() : games(false) {}
  bool games :1;
} _ThriftFindGamesResponse__isset;

class ThriftFindGamesResponse {
 public:

  ThriftFindGamesResponse(const ThriftFindGamesResponse&);
  ThriftFindGamesResponse& operator=(const ThriftFindGamesResponse&);
  ThriftFindGamesResponse() {
  }

  virtual ~ThriftFindGamesResponse() throw();
  std::vector< ::es::ThriftServerGame>  games;

  _ThriftFindGamesResponse__isset __isset;

  void __set_games(const std::vector< ::es::ThriftServerGame> & val);

  bool operator == (const ThriftFindGamesResponse & rhs) const
  {
    if (!(games == rhs.games))
      return false;
    return true;
  }
  bool operator != (const ThriftFindGamesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftFindGamesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftFindGamesResponse &a, ThriftFindGamesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftFindGamesResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
