/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftFindZoneAndRoomByNameRequest_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftFindZoneAndRoomByNameRequest::~ThriftFindZoneAndRoomByNameRequest() throw() {
}


void ThriftFindZoneAndRoomByNameRequest::__set_zoneName(const std::string& val) {
  this->zoneName = val;
}

void ThriftFindZoneAndRoomByNameRequest::__set_roomName(const std::string& val) {
  this->roomName = val;
}

uint32_t ThriftFindZoneAndRoomByNameRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomName);
          this->__isset.roomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftFindZoneAndRoomByNameRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftFindZoneAndRoomByNameRequest");

  xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->zoneName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->roomName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftFindZoneAndRoomByNameRequest &a, ThriftFindZoneAndRoomByNameRequest &b) {
  using ::std::swap;
  swap(a.zoneName, b.zoneName);
  swap(a.roomName, b.roomName);
  swap(a.__isset, b.__isset);
}

ThriftFindZoneAndRoomByNameRequest::ThriftFindZoneAndRoomByNameRequest(const ThriftFindZoneAndRoomByNameRequest& other0) {
  zoneName = other0.zoneName;
  roomName = other0.roomName;
  __isset = other0.__isset;
}
ThriftFindZoneAndRoomByNameRequest& ThriftFindZoneAndRoomByNameRequest::operator=(const ThriftFindZoneAndRoomByNameRequest& other1) {
  zoneName = other1.zoneName;
  roomName = other1.roomName;
  __isset = other1.__isset;
  return *this;
}
void ThriftFindZoneAndRoomByNameRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftFindZoneAndRoomByNameRequest(";
  out << "zoneName=" << to_string(zoneName);
  out << ", " << "roomName=" << to_string(roomName);
  out << ")";
}

} // namespace
