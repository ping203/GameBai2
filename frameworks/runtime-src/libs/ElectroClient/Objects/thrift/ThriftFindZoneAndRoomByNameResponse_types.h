/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftFindZoneAndRoomByNameResponse_TYPES_H
#define ThriftFindZoneAndRoomByNameResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftFindZoneAndRoomByNameResponse;

typedef struct _ThriftFindZoneAndRoomByNameResponse__isset {
  _ThriftFindZoneAndRoomByNameResponse__isset() : roomAndZoneList(false) {}
  bool roomAndZoneList :1;
} _ThriftFindZoneAndRoomByNameResponse__isset;

class ThriftFindZoneAndRoomByNameResponse {
 public:

  ThriftFindZoneAndRoomByNameResponse(const ThriftFindZoneAndRoomByNameResponse&);
  ThriftFindZoneAndRoomByNameResponse& operator=(const ThriftFindZoneAndRoomByNameResponse&);
  ThriftFindZoneAndRoomByNameResponse() {
  }

  virtual ~ThriftFindZoneAndRoomByNameResponse() throw();
  std::vector<std::vector<int32_t> >  roomAndZoneList;

  _ThriftFindZoneAndRoomByNameResponse__isset __isset;

  void __set_roomAndZoneList(const std::vector<std::vector<int32_t> > & val);

  bool operator == (const ThriftFindZoneAndRoomByNameResponse & rhs) const
  {
    if (!(roomAndZoneList == rhs.roomAndZoneList))
      return false;
    return true;
  }
  bool operator != (const ThriftFindZoneAndRoomByNameResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftFindZoneAndRoomByNameResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftFindZoneAndRoomByNameResponse &a, ThriftFindZoneAndRoomByNameResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftFindZoneAndRoomByNameResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
