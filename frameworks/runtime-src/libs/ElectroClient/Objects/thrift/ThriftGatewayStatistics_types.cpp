/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftGatewayStatistics_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftGatewayStatistics::~ThriftGatewayStatistics() throw() {
}


void ThriftGatewayStatistics::__set_bytesInTotal(const int64_t val) {
  this->bytesInTotal = val;
}

void ThriftGatewayStatistics::__set_bytesOutTotal(const int64_t val) {
  this->bytesOutTotal = val;
}

void ThriftGatewayStatistics::__set_messagesInTotal(const int64_t val) {
  this->messagesInTotal = val;
}

void ThriftGatewayStatistics::__set_messagesOutTotal(const int64_t val) {
  this->messagesOutTotal = val;
}

uint32_t ThriftGatewayStatistics::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytesInTotal);
          this->__isset.bytesInTotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytesOutTotal);
          this->__isset.bytesOutTotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messagesInTotal);
          this->__isset.messagesInTotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messagesOutTotal);
          this->__isset.messagesOutTotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftGatewayStatistics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftGatewayStatistics");

  xfer += oprot->writeFieldBegin("bytesInTotal", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bytesInTotal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bytesOutTotal", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bytesOutTotal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messagesInTotal", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->messagesInTotal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messagesOutTotal", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->messagesOutTotal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftGatewayStatistics &a, ThriftGatewayStatistics &b) {
  using ::std::swap;
  swap(a.bytesInTotal, b.bytesInTotal);
  swap(a.bytesOutTotal, b.bytesOutTotal);
  swap(a.messagesInTotal, b.messagesInTotal);
  swap(a.messagesOutTotal, b.messagesOutTotal);
  swap(a.__isset, b.__isset);
}

ThriftGatewayStatistics::ThriftGatewayStatistics(const ThriftGatewayStatistics& other0) {
  bytesInTotal = other0.bytesInTotal;
  bytesOutTotal = other0.bytesOutTotal;
  messagesInTotal = other0.messagesInTotal;
  messagesOutTotal = other0.messagesOutTotal;
  __isset = other0.__isset;
}
ThriftGatewayStatistics& ThriftGatewayStatistics::operator=(const ThriftGatewayStatistics& other1) {
  bytesInTotal = other1.bytesInTotal;
  bytesOutTotal = other1.bytesOutTotal;
  messagesInTotal = other1.messagesInTotal;
  messagesOutTotal = other1.messagesOutTotal;
  __isset = other1.__isset;
  return *this;
}
void ThriftGatewayStatistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftGatewayStatistics(";
  out << "bytesInTotal=" << to_string(bytesInTotal);
  out << ", " << "bytesOutTotal=" << to_string(bytesOutTotal);
  out << ", " << "messagesInTotal=" << to_string(messagesInTotal);
  out << ", " << "messagesOutTotal=" << to_string(messagesOutTotal);
  out << ")";
}

} // namespace
