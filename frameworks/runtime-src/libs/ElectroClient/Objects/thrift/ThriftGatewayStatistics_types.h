/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGatewayStatistics_TYPES_H
#define ThriftGatewayStatistics_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftGatewayStatistics;

typedef struct _ThriftGatewayStatistics__isset {
  _ThriftGatewayStatistics__isset() : bytesInTotal(false), bytesOutTotal(false), messagesInTotal(false), messagesOutTotal(false) {}
  bool bytesInTotal :1;
  bool bytesOutTotal :1;
  bool messagesInTotal :1;
  bool messagesOutTotal :1;
} _ThriftGatewayStatistics__isset;

class ThriftGatewayStatistics {
 public:

  ThriftGatewayStatistics(const ThriftGatewayStatistics&);
  ThriftGatewayStatistics& operator=(const ThriftGatewayStatistics&);
  ThriftGatewayStatistics() : bytesInTotal(0), bytesOutTotal(0), messagesInTotal(0), messagesOutTotal(0) {
  }

  virtual ~ThriftGatewayStatistics() throw();
  int64_t bytesInTotal;
  int64_t bytesOutTotal;
  int64_t messagesInTotal;
  int64_t messagesOutTotal;

  _ThriftGatewayStatistics__isset __isset;

  void __set_bytesInTotal(const int64_t val);

  void __set_bytesOutTotal(const int64_t val);

  void __set_messagesInTotal(const int64_t val);

  void __set_messagesOutTotal(const int64_t val);

  bool operator == (const ThriftGatewayStatistics & rhs) const
  {
    if (!(bytesInTotal == rhs.bytesInTotal))
      return false;
    if (!(bytesOutTotal == rhs.bytesOutTotal))
      return false;
    if (!(messagesInTotal == rhs.messagesInTotal))
      return false;
    if (!(messagesOutTotal == rhs.messagesOutTotal))
      return false;
    return true;
  }
  bool operator != (const ThriftGatewayStatistics &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGatewayStatistics & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGatewayStatistics &a, ThriftGatewayStatistics &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGatewayStatistics& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
