/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftGenericErrorResponse_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftGenericErrorResponse::~ThriftGenericErrorResponse() throw() {
}


void ThriftGenericErrorResponse::__set_requestMessageType(const  ::es::ThriftMessageType::type val) {
  this->requestMessageType = val;
}

void ThriftGenericErrorResponse::__set_errorType(const  ::es::ThriftErrorType::type val) {
  this->errorType = val;
}

void ThriftGenericErrorResponse::__set_extraData(const  ::es::ThriftFlattenedEsObject& val) {
  this->extraData = val;
}

uint32_t ThriftGenericErrorResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->requestMessageType = ( ::es::ThriftMessageType::type)ecast0;
          this->__isset.requestMessageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->errorType = ( ::es::ThriftErrorType::type)ecast1;
          this->__isset.errorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->extraData.read(iprot);
          this->__isset.extraData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftGenericErrorResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftGenericErrorResponse");

  xfer += oprot->writeFieldBegin("requestMessageType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->requestMessageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->errorType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extraData", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->extraData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftGenericErrorResponse &a, ThriftGenericErrorResponse &b) {
  using ::std::swap;
  swap(a.requestMessageType, b.requestMessageType);
  swap(a.errorType, b.errorType);
  swap(a.extraData, b.extraData);
  swap(a.__isset, b.__isset);
}

ThriftGenericErrorResponse::ThriftGenericErrorResponse(const ThriftGenericErrorResponse& other2) {
  requestMessageType = other2.requestMessageType;
  errorType = other2.errorType;
  extraData = other2.extraData;
  __isset = other2.__isset;
}
ThriftGenericErrorResponse& ThriftGenericErrorResponse::operator=(const ThriftGenericErrorResponse& other3) {
  requestMessageType = other3.requestMessageType;
  errorType = other3.errorType;
  extraData = other3.extraData;
  __isset = other3.__isset;
  return *this;
}
void ThriftGenericErrorResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftGenericErrorResponse(";
  out << "requestMessageType=" << to_string(requestMessageType);
  out << ", " << "errorType=" << to_string(errorType);
  out << ", " << "extraData=" << to_string(extraData);
  out << ")";
}

} // namespace
