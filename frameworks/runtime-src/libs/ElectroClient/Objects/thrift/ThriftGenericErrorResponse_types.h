/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGenericErrorResponse_TYPES_H
#define ThriftGenericErrorResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"
#include "libs/TProtocol.h"
#include "libs/TTransport.h"

#include "ThriftFlattenedEsObject_types.h"
#include "ThriftErrorType_types.h"
#include "ThriftMessageType_types.h"


namespace es {

class ThriftGenericErrorResponse;

typedef struct _ThriftGenericErrorResponse__isset {
  _ThriftGenericErrorResponse__isset() : requestMessageType(false), errorType(false), extraData(false) {}
  bool requestMessageType :1;
  bool errorType :1;
  bool extraData :1;
} _ThriftGenericErrorResponse__isset;

class ThriftGenericErrorResponse {
 public:

  ThriftGenericErrorResponse(const ThriftGenericErrorResponse&);
  ThriftGenericErrorResponse& operator=(const ThriftGenericErrorResponse&);
  ThriftGenericErrorResponse() : requestMessageType(( ::es::ThriftMessageType::type)0), errorType(( ::es::ThriftErrorType::type)0) {
  }

  virtual ~ThriftGenericErrorResponse() throw();
   ::es::ThriftMessageType::type requestMessageType;
   ::es::ThriftErrorType::type errorType;
   ::es::ThriftFlattenedEsObject extraData;

  _ThriftGenericErrorResponse__isset __isset;

  void __set_requestMessageType(const  ::es::ThriftMessageType::type val);

  void __set_errorType(const  ::es::ThriftErrorType::type val);

  void __set_extraData(const  ::es::ThriftFlattenedEsObject& val);

  bool operator == (const ThriftGenericErrorResponse & rhs) const
  {
    if (!(requestMessageType == rhs.requestMessageType))
      return false;
    if (!(errorType == rhs.errorType))
      return false;
    if (!(extraData == rhs.extraData))
      return false;
    return true;
  }
  bool operator != (const ThriftGenericErrorResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGenericErrorResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGenericErrorResponse &a, ThriftGenericErrorResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGenericErrorResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
