/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGetGameTypesResponse_TYPES_H
#define ThriftGetGameTypesResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftGetGameTypesResponse;

typedef struct _ThriftGetGameTypesResponse__isset {
  _ThriftGetGameTypesResponse__isset() : gameTypes(false) {}
  bool gameTypes :1;
} _ThriftGetGameTypesResponse__isset;

class ThriftGetGameTypesResponse {
 public:

  ThriftGetGameTypesResponse(const ThriftGetGameTypesResponse&);
  ThriftGetGameTypesResponse& operator=(const ThriftGetGameTypesResponse&);
  ThriftGetGameTypesResponse() {
  }

  virtual ~ThriftGetGameTypesResponse() throw();
  std::vector<std::string>  gameTypes;

  _ThriftGetGameTypesResponse__isset __isset;

  void __set_gameTypes(const std::vector<std::string> & val);

  bool operator == (const ThriftGetGameTypesResponse & rhs) const
  {
    if (!(gameTypes == rhs.gameTypes))
      return false;
    return true;
  }
  bool operator != (const ThriftGetGameTypesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGetGameTypesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGetGameTypesResponse &a, ThriftGetGameTypesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGetGameTypesResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
