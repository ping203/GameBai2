/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGetServerLocalTimeResponse_TYPES_H
#define ThriftGetServerLocalTimeResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"


namespace es {

class ThriftGetServerLocalTimeResponse;

typedef struct _ThriftGetServerLocalTimeResponse__isset {
  _ThriftGetServerLocalTimeResponse__isset() : serverLocalTimeInMilliseconds(false) {}
  bool serverLocalTimeInMilliseconds :1;
} _ThriftGetServerLocalTimeResponse__isset;

class ThriftGetServerLocalTimeResponse {
 public:

  ThriftGetServerLocalTimeResponse(const ThriftGetServerLocalTimeResponse&);
  ThriftGetServerLocalTimeResponse& operator=(const ThriftGetServerLocalTimeResponse&);
  ThriftGetServerLocalTimeResponse() : serverLocalTimeInMilliseconds(0) {
  }

  virtual ~ThriftGetServerLocalTimeResponse() throw();
  int64_t serverLocalTimeInMilliseconds;

  _ThriftGetServerLocalTimeResponse__isset __isset;

  void __set_serverLocalTimeInMilliseconds(const int64_t val);

  bool operator == (const ThriftGetServerLocalTimeResponse & rhs) const
  {
    if (!(serverLocalTimeInMilliseconds == rhs.serverLocalTimeInMilliseconds))
      return false;
    return true;
  }
  bool operator != (const ThriftGetServerLocalTimeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGetServerLocalTimeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGetServerLocalTimeResponse &a, ThriftGetServerLocalTimeResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGetServerLocalTimeResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
