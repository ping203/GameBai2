/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGetUserCountResponse_TYPES_H
#define ThriftGetUserCountResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftGetUserCountResponse;

typedef struct _ThriftGetUserCountResponse__isset {
  _ThriftGetUserCountResponse__isset() : count(false) {}
  bool count :1;
} _ThriftGetUserCountResponse__isset;

class ThriftGetUserCountResponse {
 public:

  ThriftGetUserCountResponse(const ThriftGetUserCountResponse&);
  ThriftGetUserCountResponse& operator=(const ThriftGetUserCountResponse&);
  ThriftGetUserCountResponse() : count(0) {
  }

  virtual ~ThriftGetUserCountResponse() throw();
  int32_t count;

  _ThriftGetUserCountResponse__isset __isset;

  void __set_count(const int32_t val);

  bool operator == (const ThriftGetUserCountResponse & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const ThriftGetUserCountResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGetUserCountResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGetUserCountResponse &a, ThriftGetUserCountResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGetUserCountResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
