/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftGetUserVariablesRequest_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftGetUserVariablesRequest::~ThriftGetUserVariablesRequest() throw() {
}


void ThriftGetUserVariablesRequest::__set_userName(const std::string& val) {
  this->userName = val;
}

void ThriftGetUserVariablesRequest::__set_userVariableNames(const std::set<std::string> & val) {
  this->userVariableNames = val;
}

uint32_t ThriftGetUserVariablesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->userVariableNames.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readSetBegin(_etype3, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _elem5;
              xfer += iprot->readString(_elem5);
              this->userVariableNames.insert(_elem5);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.userVariableNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftGetUserVariablesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftGetUserVariablesRequest");

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userVariableNames", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->userVariableNames.size()));
    std::set<std::string> ::const_iterator _iter6;
    for (_iter6 = this->userVariableNames.begin(); _iter6 != this->userVariableNames.end(); ++_iter6)
    {
      xfer += oprot->writeString((*_iter6));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftGetUserVariablesRequest &a, ThriftGetUserVariablesRequest &b) {
  using ::std::swap;
  swap(a.userName, b.userName);
  swap(a.userVariableNames, b.userVariableNames);
  swap(a.__isset, b.__isset);
}

ThriftGetUserVariablesRequest::ThriftGetUserVariablesRequest(const ThriftGetUserVariablesRequest& other7) {
  userName = other7.userName;
  userVariableNames = other7.userVariableNames;
  __isset = other7.__isset;
}
ThriftGetUserVariablesRequest& ThriftGetUserVariablesRequest::operator=(const ThriftGetUserVariablesRequest& other8) {
  userName = other8.userName;
  userVariableNames = other8.userVariableNames;
  __isset = other8.__isset;
  return *this;
}
void ThriftGetUserVariablesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftGetUserVariablesRequest(";
  out << "userName=" << to_string(userName);
  out << ", " << "userVariableNames=" << to_string(userVariableNames);
  out << ")";
}

} // namespace
