/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGetUserVariablesRequest_TYPES_H
#define ThriftGetUserVariablesRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftGetUserVariablesRequest;

typedef struct _ThriftGetUserVariablesRequest__isset {
  _ThriftGetUserVariablesRequest__isset() : userName(false), userVariableNames(false) {}
  bool userName :1;
  bool userVariableNames :1;
} _ThriftGetUserVariablesRequest__isset;

class ThriftGetUserVariablesRequest {
 public:

  ThriftGetUserVariablesRequest(const ThriftGetUserVariablesRequest&);
  ThriftGetUserVariablesRequest& operator=(const ThriftGetUserVariablesRequest&);
  ThriftGetUserVariablesRequest() : userName() {
  }

  virtual ~ThriftGetUserVariablesRequest() throw();
  std::string userName;
  std::set<std::string>  userVariableNames;

  _ThriftGetUserVariablesRequest__isset __isset;

  void __set_userName(const std::string& val);

  void __set_userVariableNames(const std::set<std::string> & val);

  bool operator == (const ThriftGetUserVariablesRequest & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(userVariableNames == rhs.userVariableNames))
      return false;
    return true;
  }
  bool operator != (const ThriftGetUserVariablesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGetUserVariablesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGetUserVariablesRequest &a, ThriftGetUserVariablesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGetUserVariablesRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
