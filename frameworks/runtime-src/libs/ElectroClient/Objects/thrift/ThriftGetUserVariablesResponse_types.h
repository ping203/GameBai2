/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGetUserVariablesResponse_TYPES_H
#define ThriftGetUserVariablesResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"
#include "libs/TProtocol.h"
#include "libs/TTransport.h"

#include "ThriftFlattenedEsObject_types.h"


namespace es {

class ThriftGetUserVariablesResponse;

typedef struct _ThriftGetUserVariablesResponse__isset {
  _ThriftGetUserVariablesResponse__isset() : userName(false), userVariables(false) {}
  bool userName :1;
  bool userVariables :1;
} _ThriftGetUserVariablesResponse__isset;

class ThriftGetUserVariablesResponse {
 public:

  ThriftGetUserVariablesResponse(const ThriftGetUserVariablesResponse&);
  ThriftGetUserVariablesResponse& operator=(const ThriftGetUserVariablesResponse&);
  ThriftGetUserVariablesResponse() : userName() {
  }

  virtual ~ThriftGetUserVariablesResponse() throw();
  std::string userName;
  std::map<std::string,  ::es::ThriftFlattenedEsObject>  userVariables;

  _ThriftGetUserVariablesResponse__isset __isset;

  void __set_userName(const std::string& val);

  void __set_userVariables(const std::map<std::string,  ::es::ThriftFlattenedEsObject> & val);

  bool operator == (const ThriftGetUserVariablesResponse & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(userVariables == rhs.userVariables))
      return false;
    return true;
  }
  bool operator != (const ThriftGetUserVariablesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGetUserVariablesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGetUserVariablesResponse &a, ThriftGetUserVariablesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGetUserVariablesResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
