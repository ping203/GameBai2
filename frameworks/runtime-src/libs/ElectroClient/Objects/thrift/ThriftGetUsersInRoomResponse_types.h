/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGetUsersInRoomResponse_TYPES_H
#define ThriftGetUsersInRoomResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"
#include "libs/TProtocol.h"
#include "libs/TTransport.h"

#include "ThriftFlattenedEsObject_types.h"
#include "ThriftUserListEntry_types.h"
#include "ThriftUserVariable_types.h"


namespace es {

class ThriftGetUsersInRoomResponse;

typedef struct _ThriftGetUsersInRoomResponse__isset {
  _ThriftGetUsersInRoomResponse__isset() : zoneId(false), roomId(false), users(false) {}
  bool zoneId :1;
  bool roomId :1;
  bool users :1;
} _ThriftGetUsersInRoomResponse__isset;

class ThriftGetUsersInRoomResponse {
 public:

  ThriftGetUsersInRoomResponse(const ThriftGetUsersInRoomResponse&);
  ThriftGetUsersInRoomResponse& operator=(const ThriftGetUsersInRoomResponse&);
  ThriftGetUsersInRoomResponse() : zoneId(0), roomId(0) {
  }

  virtual ~ThriftGetUsersInRoomResponse() throw();
  int32_t zoneId;
  int32_t roomId;
  std::vector< ::es::ThriftUserListEntry>  users;

  _ThriftGetUsersInRoomResponse__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_users(const std::vector< ::es::ThriftUserListEntry> & val);

  bool operator == (const ThriftGetUsersInRoomResponse & rhs) const
  {
    if (!(zoneId == rhs.zoneId))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    if (!(users == rhs.users))
      return false;
    return true;
  }
  bool operator != (const ThriftGetUsersInRoomResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGetUsersInRoomResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGetUsersInRoomResponse &a, ThriftGetUsersInRoomResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGetUsersInRoomResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
