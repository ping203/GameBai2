/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftGetZonesResponse_TYPES_H
#define ThriftGetZonesResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftZoneListEntry_types.h"


namespace es {

class ThriftGetZonesResponse;

typedef struct _ThriftGetZonesResponse__isset {
  _ThriftGetZonesResponse__isset() : zones(false) {}
  bool zones :1;
} _ThriftGetZonesResponse__isset;

class ThriftGetZonesResponse {
 public:

  ThriftGetZonesResponse(const ThriftGetZonesResponse&);
  ThriftGetZonesResponse& operator=(const ThriftGetZonesResponse&);
  ThriftGetZonesResponse() {
  }

  virtual ~ThriftGetZonesResponse() throw();
  std::vector< ::es::ThriftZoneListEntry>  zones;

  _ThriftGetZonesResponse__isset __isset;

  void __set_zones(const std::vector< ::es::ThriftZoneListEntry> & val);

  bool operator == (const ThriftGetZonesResponse & rhs) const
  {
    if (!(zones == rhs.zones))
      return false;
    return true;
  }
  bool operator != (const ThriftGetZonesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGetZonesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftGetZonesResponse &a, ThriftGetZonesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftGetZonesResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
