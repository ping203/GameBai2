/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftJoinRoomEvent_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftJoinRoomEvent::~ThriftJoinRoomEvent() throw() {
}


void ThriftJoinRoomEvent::__set_zoneId(const int32_t val) {
  this->zoneId = val;
__isset.zoneId = true;
}

void ThriftJoinRoomEvent::__set_roomId(const int32_t val) {
  this->roomId = val;
__isset.roomId = true;
}

void ThriftJoinRoomEvent::__set_roomName(const std::string& val) {
  this->roomName = val;
__isset.roomName = true;
}

void ThriftJoinRoomEvent::__set_roomDescription(const std::string& val) {
  this->roomDescription = val;
__isset.roomDescription = true;
}

void ThriftJoinRoomEvent::__set_hasPassword(const bool val) {
  this->hasPassword = val;
__isset.hasPassword = true;
}

void ThriftJoinRoomEvent::__set_hidden(const bool val) {
  this->hidden = val;
__isset.hidden = true;
}

void ThriftJoinRoomEvent::__set_capacity(const int32_t val) {
  this->capacity = val;
__isset.capacity = true;
}

void ThriftJoinRoomEvent::__set_users(const std::vector< ::es::ThriftUserListEntry> & val) {
  this->users = val;
__isset.users = true;
}

void ThriftJoinRoomEvent::__set_roomVariables(const std::vector< ::es::ThriftRoomVariable> & val) {
  this->roomVariables = val;
__isset.roomVariables = true;
}

void ThriftJoinRoomEvent::__set_pluginHandles(const std::vector<std::string> & val) {
  this->pluginHandles = val;
__isset.pluginHandles = true;
}

uint32_t ThriftJoinRoomEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomName);
          this->__isset.roomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomDescription);
          this->__isset.roomDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasPassword);
          this->__isset.hasPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hidden);
          this->__isset.hidden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->capacity);
          this->__isset.capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->users.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->users.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->users[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.users = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->roomVariables.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->roomVariables.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->roomVariables[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.roomVariables = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pluginHandles.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->pluginHandles.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readString(this->pluginHandles[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pluginHandles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftJoinRoomEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftJoinRoomEvent");

  if (this->__isset.zoneId) {
    xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->zoneId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomId) {
    xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->roomId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomName) {
    xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->roomName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomDescription) {
    xfer += oprot->writeFieldBegin("roomDescription", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->roomDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hasPassword) {
    xfer += oprot->writeFieldBegin("hasPassword", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->hasPassword);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hidden) {
    xfer += oprot->writeFieldBegin("hidden", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->hidden);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.capacity) {
    xfer += oprot->writeFieldBegin("capacity", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->capacity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.users) {
    xfer += oprot->writeFieldBegin("users", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->users.size()));
      std::vector< ::es::ThriftUserListEntry> ::const_iterator _iter15;
      for (_iter15 = this->users.begin(); _iter15 != this->users.end(); ++_iter15)
      {
        xfer += (*_iter15).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomVariables) {
    xfer += oprot->writeFieldBegin("roomVariables", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->roomVariables.size()));
      std::vector< ::es::ThriftRoomVariable> ::const_iterator _iter16;
      for (_iter16 = this->roomVariables.begin(); _iter16 != this->roomVariables.end(); ++_iter16)
      {
        xfer += (*_iter16).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pluginHandles) {
    xfer += oprot->writeFieldBegin("pluginHandles", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->pluginHandles.size()));
      std::vector<std::string> ::const_iterator _iter17;
      for (_iter17 = this->pluginHandles.begin(); _iter17 != this->pluginHandles.end(); ++_iter17)
      {
        xfer += oprot->writeString((*_iter17));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftJoinRoomEvent &a, ThriftJoinRoomEvent &b) {
  using ::std::swap;
  swap(a.zoneId, b.zoneId);
  swap(a.roomId, b.roomId);
  swap(a.roomName, b.roomName);
  swap(a.roomDescription, b.roomDescription);
  swap(a.hasPassword, b.hasPassword);
  swap(a.hidden, b.hidden);
  swap(a.capacity, b.capacity);
  swap(a.users, b.users);
  swap(a.roomVariables, b.roomVariables);
  swap(a.pluginHandles, b.pluginHandles);
  swap(a.__isset, b.__isset);
}

ThriftJoinRoomEvent::ThriftJoinRoomEvent(const ThriftJoinRoomEvent& other18) {
  zoneId = other18.zoneId;
  roomId = other18.roomId;
  roomName = other18.roomName;
  roomDescription = other18.roomDescription;
  hasPassword = other18.hasPassword;
  hidden = other18.hidden;
  capacity = other18.capacity;
  users = other18.users;
  roomVariables = other18.roomVariables;
  pluginHandles = other18.pluginHandles;
  __isset = other18.__isset;
}
ThriftJoinRoomEvent& ThriftJoinRoomEvent::operator=(const ThriftJoinRoomEvent& other19) {
  zoneId = other19.zoneId;
  roomId = other19.roomId;
  roomName = other19.roomName;
  roomDescription = other19.roomDescription;
  hasPassword = other19.hasPassword;
  hidden = other19.hidden;
  capacity = other19.capacity;
  users = other19.users;
  roomVariables = other19.roomVariables;
  pluginHandles = other19.pluginHandles;
  __isset = other19.__isset;
  return *this;
}
void ThriftJoinRoomEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftJoinRoomEvent(";
  out << "zoneId="; (__isset.zoneId ? (out << to_string(zoneId)) : (out << "<null>"));
  out << ", " << "roomId="; (__isset.roomId ? (out << to_string(roomId)) : (out << "<null>"));
  out << ", " << "roomName="; (__isset.roomName ? (out << to_string(roomName)) : (out << "<null>"));
  out << ", " << "roomDescription="; (__isset.roomDescription ? (out << to_string(roomDescription)) : (out << "<null>"));
  out << ", " << "hasPassword="; (__isset.hasPassword ? (out << to_string(hasPassword)) : (out << "<null>"));
  out << ", " << "hidden="; (__isset.hidden ? (out << to_string(hidden)) : (out << "<null>"));
  out << ", " << "capacity="; (__isset.capacity ? (out << to_string(capacity)) : (out << "<null>"));
  out << ", " << "users="; (__isset.users ? (out << to_string(users)) : (out << "<null>"));
  out << ", " << "roomVariables="; (__isset.roomVariables ? (out << to_string(roomVariables)) : (out << "<null>"));
  out << ", " << "pluginHandles="; (__isset.pluginHandles ? (out << to_string(pluginHandles)) : (out << "<null>"));
  out << ")";
}

} // namespace
