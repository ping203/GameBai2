/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftJoinRoomEvent_TYPES_H
#define ThriftJoinRoomEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"
#include "ThriftRoomVariable_types.h"
#include "ThriftUserListEntry_types.h"
#include "ThriftUserVariable_types.h"


namespace es {

class ThriftJoinRoomEvent;

typedef struct _ThriftJoinRoomEvent__isset {
  _ThriftJoinRoomEvent__isset() : zoneId(false), roomId(false), roomName(false), roomDescription(false), hasPassword(false), hidden(false), capacity(false), users(false), roomVariables(false), pluginHandles(false) {}
  bool zoneId :1;
  bool roomId :1;
  bool roomName :1;
  bool roomDescription :1;
  bool hasPassword :1;
  bool hidden :1;
  bool capacity :1;
  bool users :1;
  bool roomVariables :1;
  bool pluginHandles :1;
} _ThriftJoinRoomEvent__isset;

class ThriftJoinRoomEvent {
 public:

  ThriftJoinRoomEvent(const ThriftJoinRoomEvent&);
  ThriftJoinRoomEvent& operator=(const ThriftJoinRoomEvent&);
  ThriftJoinRoomEvent() : zoneId(0), roomId(0), roomName(), roomDescription(), hasPassword(0), hidden(0), capacity(0) {
  }

  virtual ~ThriftJoinRoomEvent() throw();
  int32_t zoneId;
  int32_t roomId;
  std::string roomName;
  std::string roomDescription;
  bool hasPassword;
  bool hidden;
  int32_t capacity;
  std::vector< ::es::ThriftUserListEntry>  users;
  std::vector< ::es::ThriftRoomVariable>  roomVariables;
  std::vector<std::string>  pluginHandles;

  _ThriftJoinRoomEvent__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_roomName(const std::string& val);

  void __set_roomDescription(const std::string& val);

  void __set_hasPassword(const bool val);

  void __set_hidden(const bool val);

  void __set_capacity(const int32_t val);

  void __set_users(const std::vector< ::es::ThriftUserListEntry> & val);

  void __set_roomVariables(const std::vector< ::es::ThriftRoomVariable> & val);

  void __set_pluginHandles(const std::vector<std::string> & val);

  bool operator == (const ThriftJoinRoomEvent & rhs) const
  {
    if (__isset.zoneId != rhs.__isset.zoneId)
      return false;
    else if (__isset.zoneId && !(zoneId == rhs.zoneId))
      return false;
    if (__isset.roomId != rhs.__isset.roomId)
      return false;
    else if (__isset.roomId && !(roomId == rhs.roomId))
      return false;
    if (__isset.roomName != rhs.__isset.roomName)
      return false;
    else if (__isset.roomName && !(roomName == rhs.roomName))
      return false;
    if (__isset.roomDescription != rhs.__isset.roomDescription)
      return false;
    else if (__isset.roomDescription && !(roomDescription == rhs.roomDescription))
      return false;
    if (__isset.hasPassword != rhs.__isset.hasPassword)
      return false;
    else if (__isset.hasPassword && !(hasPassword == rhs.hasPassword))
      return false;
    if (__isset.hidden != rhs.__isset.hidden)
      return false;
    else if (__isset.hidden && !(hidden == rhs.hidden))
      return false;
    if (__isset.capacity != rhs.__isset.capacity)
      return false;
    else if (__isset.capacity && !(capacity == rhs.capacity))
      return false;
    if (__isset.users != rhs.__isset.users)
      return false;
    else if (__isset.users && !(users == rhs.users))
      return false;
    if (__isset.roomVariables != rhs.__isset.roomVariables)
      return false;
    else if (__isset.roomVariables && !(roomVariables == rhs.roomVariables))
      return false;
    if (__isset.pluginHandles != rhs.__isset.pluginHandles)
      return false;
    else if (__isset.pluginHandles && !(pluginHandles == rhs.pluginHandles))
      return false;
    return true;
  }
  bool operator != (const ThriftJoinRoomEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftJoinRoomEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftJoinRoomEvent &a, ThriftJoinRoomEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftJoinRoomEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
