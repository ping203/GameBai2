/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftJoinRoomRequest_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftJoinRoomRequest::~ThriftJoinRoomRequest() throw() {
}


void ThriftJoinRoomRequest::__set_zoneName(const std::string& val) {
  this->zoneName = val;
__isset.zoneName = true;
}

void ThriftJoinRoomRequest::__set_roomName(const std::string& val) {
  this->roomName = val;
__isset.roomName = true;
}

void ThriftJoinRoomRequest::__set_zoneId(const int32_t val) {
  this->zoneId = val;
__isset.zoneId = true;
}

void ThriftJoinRoomRequest::__set_roomId(const int32_t val) {
  this->roomId = val;
__isset.roomId = true;
}

void ThriftJoinRoomRequest::__set_password(const std::string& val) {
  this->password = val;
__isset.password = true;
}

void ThriftJoinRoomRequest::__set_receivingRoomListUpdates(const bool val) {
  this->receivingRoomListUpdates = val;
__isset.receivingRoomListUpdates = true;
}

void ThriftJoinRoomRequest::__set_receivingRoomAttributeUpdates(const bool val) {
  this->receivingRoomAttributeUpdates = val;
__isset.receivingRoomAttributeUpdates = true;
}

void ThriftJoinRoomRequest::__set_receivingUserListUpdates(const bool val) {
  this->receivingUserListUpdates = val;
__isset.receivingUserListUpdates = true;
}

void ThriftJoinRoomRequest::__set_receivingUserVariableUpdates(const bool val) {
  this->receivingUserVariableUpdates = val;
__isset.receivingUserVariableUpdates = true;
}

void ThriftJoinRoomRequest::__set_receivingRoomVariableUpdates(const bool val) {
  this->receivingRoomVariableUpdates = val;
__isset.receivingRoomVariableUpdates = true;
}

void ThriftJoinRoomRequest::__set_receivingVideoEvents(const bool val) {
  this->receivingVideoEvents = val;
__isset.receivingVideoEvents = true;
}

uint32_t ThriftJoinRoomRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomName);
          this->__isset.roomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingRoomListUpdates);
          this->__isset.receivingRoomListUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingRoomAttributeUpdates);
          this->__isset.receivingRoomAttributeUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingUserListUpdates);
          this->__isset.receivingUserListUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingUserVariableUpdates);
          this->__isset.receivingUserVariableUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingRoomVariableUpdates);
          this->__isset.receivingRoomVariableUpdates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->receivingVideoEvents);
          this->__isset.receivingVideoEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftJoinRoomRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftJoinRoomRequest");

  if (this->__isset.zoneName) {
    xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->zoneName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomName) {
    xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->roomName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.zoneId) {
    xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->zoneId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomId) {
    xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->roomId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.password) {
    xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->password);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivingRoomListUpdates) {
    xfer += oprot->writeFieldBegin("receivingRoomListUpdates", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->receivingRoomListUpdates);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivingRoomAttributeUpdates) {
    xfer += oprot->writeFieldBegin("receivingRoomAttributeUpdates", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->receivingRoomAttributeUpdates);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivingUserListUpdates) {
    xfer += oprot->writeFieldBegin("receivingUserListUpdates", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->receivingUserListUpdates);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivingUserVariableUpdates) {
    xfer += oprot->writeFieldBegin("receivingUserVariableUpdates", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->receivingUserVariableUpdates);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivingRoomVariableUpdates) {
    xfer += oprot->writeFieldBegin("receivingRoomVariableUpdates", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->receivingRoomVariableUpdates);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivingVideoEvents) {
    xfer += oprot->writeFieldBegin("receivingVideoEvents", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->receivingVideoEvents);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftJoinRoomRequest &a, ThriftJoinRoomRequest &b) {
  using ::std::swap;
  swap(a.zoneName, b.zoneName);
  swap(a.roomName, b.roomName);
  swap(a.zoneId, b.zoneId);
  swap(a.roomId, b.roomId);
  swap(a.password, b.password);
  swap(a.receivingRoomListUpdates, b.receivingRoomListUpdates);
  swap(a.receivingRoomAttributeUpdates, b.receivingRoomAttributeUpdates);
  swap(a.receivingUserListUpdates, b.receivingUserListUpdates);
  swap(a.receivingUserVariableUpdates, b.receivingUserVariableUpdates);
  swap(a.receivingRoomVariableUpdates, b.receivingRoomVariableUpdates);
  swap(a.receivingVideoEvents, b.receivingVideoEvents);
  swap(a.__isset, b.__isset);
}

ThriftJoinRoomRequest::ThriftJoinRoomRequest(const ThriftJoinRoomRequest& other0) {
  zoneName = other0.zoneName;
  roomName = other0.roomName;
  zoneId = other0.zoneId;
  roomId = other0.roomId;
  password = other0.password;
  receivingRoomListUpdates = other0.receivingRoomListUpdates;
  receivingRoomAttributeUpdates = other0.receivingRoomAttributeUpdates;
  receivingUserListUpdates = other0.receivingUserListUpdates;
  receivingUserVariableUpdates = other0.receivingUserVariableUpdates;
  receivingRoomVariableUpdates = other0.receivingRoomVariableUpdates;
  receivingVideoEvents = other0.receivingVideoEvents;
  __isset = other0.__isset;
}
ThriftJoinRoomRequest& ThriftJoinRoomRequest::operator=(const ThriftJoinRoomRequest& other1) {
  zoneName = other1.zoneName;
  roomName = other1.roomName;
  zoneId = other1.zoneId;
  roomId = other1.roomId;
  password = other1.password;
  receivingRoomListUpdates = other1.receivingRoomListUpdates;
  receivingRoomAttributeUpdates = other1.receivingRoomAttributeUpdates;
  receivingUserListUpdates = other1.receivingUserListUpdates;
  receivingUserVariableUpdates = other1.receivingUserVariableUpdates;
  receivingRoomVariableUpdates = other1.receivingRoomVariableUpdates;
  receivingVideoEvents = other1.receivingVideoEvents;
  __isset = other1.__isset;
  return *this;
}
void ThriftJoinRoomRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftJoinRoomRequest(";
  out << "zoneName="; (__isset.zoneName ? (out << to_string(zoneName)) : (out << "<null>"));
  out << ", " << "roomName="; (__isset.roomName ? (out << to_string(roomName)) : (out << "<null>"));
  out << ", " << "zoneId="; (__isset.zoneId ? (out << to_string(zoneId)) : (out << "<null>"));
  out << ", " << "roomId="; (__isset.roomId ? (out << to_string(roomId)) : (out << "<null>"));
  out << ", " << "password="; (__isset.password ? (out << to_string(password)) : (out << "<null>"));
  out << ", " << "receivingRoomListUpdates="; (__isset.receivingRoomListUpdates ? (out << to_string(receivingRoomListUpdates)) : (out << "<null>"));
  out << ", " << "receivingRoomAttributeUpdates="; (__isset.receivingRoomAttributeUpdates ? (out << to_string(receivingRoomAttributeUpdates)) : (out << "<null>"));
  out << ", " << "receivingUserListUpdates="; (__isset.receivingUserListUpdates ? (out << to_string(receivingUserListUpdates)) : (out << "<null>"));
  out << ", " << "receivingUserVariableUpdates="; (__isset.receivingUserVariableUpdates ? (out << to_string(receivingUserVariableUpdates)) : (out << "<null>"));
  out << ", " << "receivingRoomVariableUpdates="; (__isset.receivingRoomVariableUpdates ? (out << to_string(receivingRoomVariableUpdates)) : (out << "<null>"));
  out << ", " << "receivingVideoEvents="; (__isset.receivingVideoEvents ? (out << to_string(receivingVideoEvents)) : (out << "<null>"));
  out << ")";
}

} // namespace
