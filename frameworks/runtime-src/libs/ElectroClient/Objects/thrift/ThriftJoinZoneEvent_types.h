/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftJoinZoneEvent_TYPES_H
#define ThriftJoinZoneEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftRoomListEntry_types.h"


namespace es {

class ThriftJoinZoneEvent;

typedef struct _ThriftJoinZoneEvent__isset {
  _ThriftJoinZoneEvent__isset() : zoneId(false), zoneName(false), rooms(false) {}
  bool zoneId :1;
  bool zoneName :1;
  bool rooms :1;
} _ThriftJoinZoneEvent__isset;

class ThriftJoinZoneEvent {
 public:

  ThriftJoinZoneEvent(const ThriftJoinZoneEvent&);
  ThriftJoinZoneEvent& operator=(const ThriftJoinZoneEvent&);
  ThriftJoinZoneEvent() : zoneId(0), zoneName() {
  }

  virtual ~ThriftJoinZoneEvent() throw();
  int32_t zoneId;
  std::string zoneName;
  std::vector< ::es::ThriftRoomListEntry>  rooms;

  _ThriftJoinZoneEvent__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_zoneName(const std::string& val);

  void __set_rooms(const std::vector< ::es::ThriftRoomListEntry> & val);

  bool operator == (const ThriftJoinZoneEvent & rhs) const
  {
    if (__isset.zoneId != rhs.__isset.zoneId)
      return false;
    else if (__isset.zoneId && !(zoneId == rhs.zoneId))
      return false;
    if (__isset.zoneName != rhs.__isset.zoneName)
      return false;
    else if (__isset.zoneName && !(zoneName == rhs.zoneName))
      return false;
    if (__isset.rooms != rhs.__isset.rooms)
      return false;
    else if (__isset.rooms && !(rooms == rhs.rooms))
      return false;
    return true;
  }
  bool operator != (const ThriftJoinZoneEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftJoinZoneEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftJoinZoneEvent &a, ThriftJoinZoneEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftJoinZoneEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
