/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftLeaveRoomRequest_TYPES_H
#define ThriftLeaveRoomRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftLeaveRoomRequest;

typedef struct _ThriftLeaveRoomRequest__isset {
  _ThriftLeaveRoomRequest__isset() : zoneId(false), roomId(false) {}
  bool zoneId :1;
  bool roomId :1;
} _ThriftLeaveRoomRequest__isset;

class ThriftLeaveRoomRequest {
 public:

  ThriftLeaveRoomRequest(const ThriftLeaveRoomRequest&);
  ThriftLeaveRoomRequest& operator=(const ThriftLeaveRoomRequest&);
  ThriftLeaveRoomRequest() : zoneId(0), roomId(0) {
  }

  virtual ~ThriftLeaveRoomRequest() throw();
  int32_t zoneId;
  int32_t roomId;

  _ThriftLeaveRoomRequest__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  bool operator == (const ThriftLeaveRoomRequest & rhs) const
  {
    if (__isset.zoneId != rhs.__isset.zoneId)
      return false;
    else if (__isset.zoneId && !(zoneId == rhs.zoneId))
      return false;
    if (__isset.roomId != rhs.__isset.roomId)
      return false;
    else if (__isset.roomId && !(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const ThriftLeaveRoomRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftLeaveRoomRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftLeaveRoomRequest &a, ThriftLeaveRoomRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftLeaveRoomRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
