/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftLoginRequest_TYPES_H
#define ThriftLoginRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"
#include "libs/TProtocol.h"
#include "libs/TTransport.h"

#include "ThriftFlattenedEsObject_types.h"
#include "ThriftFlattenedEsObjectRO_types.h"
#include "ThriftProtocol_types.h"


namespace es {

class ThriftLoginRequest;

typedef struct _ThriftLoginRequest__isset {
  _ThriftLoginRequest__isset() : userName(false), password(false), sharedSecret(false), esObject(false), userVariables(false), protocol(false), hashId(false), clientVersion(false), clientType(false), remoteAddress(false) {}
  bool userName :1;
  bool password :1;
  bool sharedSecret :1;
  bool esObject :1;
  bool userVariables :1;
  bool protocol :1;
  bool hashId :1;
  bool clientVersion :1;
  bool clientType :1;
  bool remoteAddress :1;
} _ThriftLoginRequest__isset;

class ThriftLoginRequest {
 public:

  ThriftLoginRequest(const ThriftLoginRequest&);
  ThriftLoginRequest& operator=(const ThriftLoginRequest&);
  ThriftLoginRequest() : userName(), password(), sharedSecret(), protocol(( ::es::ThriftProtocol::type)0), hashId(0), clientVersion(), clientType() {
  }

  virtual ~ThriftLoginRequest() throw();
  std::string userName;
  std::string password;
  std::string sharedSecret;
   ::es::ThriftFlattenedEsObjectRO esObject;
  std::map<std::string,  ::es::ThriftFlattenedEsObject>  userVariables;
   ::es::ThriftProtocol::type protocol;
  int32_t hashId;
  std::string clientVersion;
  std::string clientType;
  std::vector<int8_t>  remoteAddress;

  _ThriftLoginRequest__isset __isset;

  void __set_userName(const std::string& val);

  void __set_password(const std::string& val);

  void __set_sharedSecret(const std::string& val);

  void __set_esObject(const  ::es::ThriftFlattenedEsObjectRO& val);

  void __set_userVariables(const std::map<std::string,  ::es::ThriftFlattenedEsObject> & val);

  void __set_protocol(const  ::es::ThriftProtocol::type val);

  void __set_hashId(const int32_t val);

  void __set_clientVersion(const std::string& val);

  void __set_clientType(const std::string& val);

  void __set_remoteAddress(const std::vector<int8_t> & val);

  bool operator == (const ThriftLoginRequest & rhs) const
  {
    if (__isset.userName != rhs.__isset.userName)
      return false;
    else if (__isset.userName && !(userName == rhs.userName))
      return false;
    if (__isset.password != rhs.__isset.password)
      return false;
    else if (__isset.password && !(password == rhs.password))
      return false;
    if (__isset.sharedSecret != rhs.__isset.sharedSecret)
      return false;
    else if (__isset.sharedSecret && !(sharedSecret == rhs.sharedSecret))
      return false;
    if (__isset.esObject != rhs.__isset.esObject)
      return false;
    else if (__isset.esObject && !(esObject == rhs.esObject))
      return false;
    if (__isset.userVariables != rhs.__isset.userVariables)
      return false;
    else if (__isset.userVariables && !(userVariables == rhs.userVariables))
      return false;
    if (__isset.protocol != rhs.__isset.protocol)
      return false;
    else if (__isset.protocol && !(protocol == rhs.protocol))
      return false;
    if (__isset.hashId != rhs.__isset.hashId)
      return false;
    else if (__isset.hashId && !(hashId == rhs.hashId))
      return false;
    if (__isset.clientVersion != rhs.__isset.clientVersion)
      return false;
    else if (__isset.clientVersion && !(clientVersion == rhs.clientVersion))
      return false;
    if (__isset.clientType != rhs.__isset.clientType)
      return false;
    else if (__isset.clientType && !(clientType == rhs.clientType))
      return false;
    if (__isset.remoteAddress != rhs.__isset.remoteAddress)
      return false;
    else if (__isset.remoteAddress && !(remoteAddress == rhs.remoteAddress))
      return false;
    return true;
  }
  bool operator != (const ThriftLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftLoginRequest &a, ThriftLoginRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftLoginRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
