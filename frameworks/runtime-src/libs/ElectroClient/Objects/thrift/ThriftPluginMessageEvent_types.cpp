/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftPluginMessageEvent_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftPluginMessageEvent::~ThriftPluginMessageEvent() throw() {
}


void ThriftPluginMessageEvent::__set_pluginName(const std::string& val) {
  this->pluginName = val;
__isset.pluginName = true;
}

void ThriftPluginMessageEvent::__set_sentToRoom(const bool val) {
  this->sentToRoom = val;
__isset.sentToRoom = true;
}

void ThriftPluginMessageEvent::__set_destinationZoneId(const int32_t val) {
  this->destinationZoneId = val;
__isset.destinationZoneId = true;
}

void ThriftPluginMessageEvent::__set_destinationRoomId(const int32_t val) {
  this->destinationRoomId = val;
__isset.destinationRoomId = true;
}

void ThriftPluginMessageEvent::__set_roomLevelPlugin(const bool val) {
  this->roomLevelPlugin = val;
__isset.roomLevelPlugin = true;
}

void ThriftPluginMessageEvent::__set_originZoneId(const int32_t val) {
  this->originZoneId = val;
__isset.originZoneId = true;
}

void ThriftPluginMessageEvent::__set_originRoomId(const int32_t val) {
  this->originRoomId = val;
__isset.originRoomId = true;
}

void ThriftPluginMessageEvent::__set_parameters(const  ::es::ThriftFlattenedEsObject& val) {
  this->parameters = val;
__isset.parameters = true;
}

uint32_t ThriftPluginMessageEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pluginName);
          this->__isset.pluginName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sentToRoom);
          this->__isset.sentToRoom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->destinationZoneId);
          this->__isset.destinationZoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->destinationRoomId);
          this->__isset.destinationRoomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->roomLevelPlugin);
          this->__isset.roomLevelPlugin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->originZoneId);
          this->__isset.originZoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->originRoomId);
          this->__isset.originRoomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameters.read(iprot);
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftPluginMessageEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftPluginMessageEvent");

  if (this->__isset.pluginName) {
    xfer += oprot->writeFieldBegin("pluginName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->pluginName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sentToRoom) {
    xfer += oprot->writeFieldBegin("sentToRoom", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->sentToRoom);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destinationZoneId) {
    xfer += oprot->writeFieldBegin("destinationZoneId", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->destinationZoneId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destinationRoomId) {
    xfer += oprot->writeFieldBegin("destinationRoomId", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->destinationRoomId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomLevelPlugin) {
    xfer += oprot->writeFieldBegin("roomLevelPlugin", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->roomLevelPlugin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.originZoneId) {
    xfer += oprot->writeFieldBegin("originZoneId", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->originZoneId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.originRoomId) {
    xfer += oprot->writeFieldBegin("originRoomId", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->originRoomId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parameters) {
    xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->parameters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftPluginMessageEvent &a, ThriftPluginMessageEvent &b) {
  using ::std::swap;
  swap(a.pluginName, b.pluginName);
  swap(a.sentToRoom, b.sentToRoom);
  swap(a.destinationZoneId, b.destinationZoneId);
  swap(a.destinationRoomId, b.destinationRoomId);
  swap(a.roomLevelPlugin, b.roomLevelPlugin);
  swap(a.originZoneId, b.originZoneId);
  swap(a.originRoomId, b.originRoomId);
  swap(a.parameters, b.parameters);
  swap(a.__isset, b.__isset);
}

ThriftPluginMessageEvent::ThriftPluginMessageEvent(const ThriftPluginMessageEvent& other0) {
  pluginName = other0.pluginName;
  sentToRoom = other0.sentToRoom;
  destinationZoneId = other0.destinationZoneId;
  destinationRoomId = other0.destinationRoomId;
  roomLevelPlugin = other0.roomLevelPlugin;
  originZoneId = other0.originZoneId;
  originRoomId = other0.originRoomId;
  parameters = other0.parameters;
  __isset = other0.__isset;
}
ThriftPluginMessageEvent& ThriftPluginMessageEvent::operator=(const ThriftPluginMessageEvent& other1) {
  pluginName = other1.pluginName;
  sentToRoom = other1.sentToRoom;
  destinationZoneId = other1.destinationZoneId;
  destinationRoomId = other1.destinationRoomId;
  roomLevelPlugin = other1.roomLevelPlugin;
  originZoneId = other1.originZoneId;
  originRoomId = other1.originRoomId;
  parameters = other1.parameters;
  __isset = other1.__isset;
  return *this;
}
void ThriftPluginMessageEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftPluginMessageEvent(";
  out << "pluginName="; (__isset.pluginName ? (out << to_string(pluginName)) : (out << "<null>"));
  out << ", " << "sentToRoom="; (__isset.sentToRoom ? (out << to_string(sentToRoom)) : (out << "<null>"));
  out << ", " << "destinationZoneId="; (__isset.destinationZoneId ? (out << to_string(destinationZoneId)) : (out << "<null>"));
  out << ", " << "destinationRoomId="; (__isset.destinationRoomId ? (out << to_string(destinationRoomId)) : (out << "<null>"));
  out << ", " << "roomLevelPlugin="; (__isset.roomLevelPlugin ? (out << to_string(roomLevelPlugin)) : (out << "<null>"));
  out << ", " << "originZoneId="; (__isset.originZoneId ? (out << to_string(originZoneId)) : (out << "<null>"));
  out << ", " << "originRoomId="; (__isset.originRoomId ? (out << to_string(originRoomId)) : (out << "<null>"));
  out << ", " << "parameters="; (__isset.parameters ? (out << to_string(parameters)) : (out << "<null>"));
  out << ")";
}

} // namespace
