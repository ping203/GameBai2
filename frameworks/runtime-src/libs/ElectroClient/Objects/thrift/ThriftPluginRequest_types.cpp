/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftPluginRequest_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftPluginRequest::~ThriftPluginRequest() throw() {
}


void ThriftPluginRequest::__set_pluginName(const std::string& val) {
  this->pluginName = val;
__isset.pluginName = true;
}

void ThriftPluginRequest::__set_zoneId(const int32_t val) {
  this->zoneId = val;
__isset.zoneId = true;
}

void ThriftPluginRequest::__set_roomId(const int32_t val) {
  this->roomId = val;
__isset.roomId = true;
}

void ThriftPluginRequest::__set_sessionKey(const int32_t val) {
  this->sessionKey = val;
__isset.sessionKey = true;
}

void ThriftPluginRequest::__set_parameters(const  ::es::ThriftFlattenedEsObject& val) {
  this->parameters = val;
__isset.parameters = true;
}

uint32_t ThriftPluginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pluginName);
          this->__isset.pluginName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sessionKey);
          this->__isset.sessionKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameters.read(iprot);
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftPluginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftPluginRequest");

  if (this->__isset.pluginName) {
    xfer += oprot->writeFieldBegin("pluginName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->pluginName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.zoneId) {
    xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->zoneId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomId) {
    xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->roomId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessionKey) {
    xfer += oprot->writeFieldBegin("sessionKey", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->sessionKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parameters) {
    xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->parameters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftPluginRequest &a, ThriftPluginRequest &b) {
  using ::std::swap;
  swap(a.pluginName, b.pluginName);
  swap(a.zoneId, b.zoneId);
  swap(a.roomId, b.roomId);
  swap(a.sessionKey, b.sessionKey);
  swap(a.parameters, b.parameters);
  swap(a.__isset, b.__isset);
}

ThriftPluginRequest::ThriftPluginRequest(const ThriftPluginRequest& other0) {
  pluginName = other0.pluginName;
  zoneId = other0.zoneId;
  roomId = other0.roomId;
  sessionKey = other0.sessionKey;
  parameters = other0.parameters;
  __isset = other0.__isset;
}
ThriftPluginRequest& ThriftPluginRequest::operator=(const ThriftPluginRequest& other1) {
  pluginName = other1.pluginName;
  zoneId = other1.zoneId;
  roomId = other1.roomId;
  sessionKey = other1.sessionKey;
  parameters = other1.parameters;
  __isset = other1.__isset;
  return *this;
}
void ThriftPluginRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftPluginRequest(";
  out << "pluginName="; (__isset.pluginName ? (out << to_string(pluginName)) : (out << "<null>"));
  out << ", " << "zoneId="; (__isset.zoneId ? (out << to_string(zoneId)) : (out << "<null>"));
  out << ", " << "roomId="; (__isset.roomId ? (out << to_string(roomId)) : (out << "<null>"));
  out << ", " << "sessionKey="; (__isset.sessionKey ? (out << to_string(sessionKey)) : (out << "<null>"));
  out << ", " << "parameters="; (__isset.parameters ? (out << to_string(parameters)) : (out << "<null>"));
  out << ")";
}

} // namespace
