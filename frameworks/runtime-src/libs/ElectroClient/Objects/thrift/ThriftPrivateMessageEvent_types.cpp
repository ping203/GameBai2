/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftPrivateMessageEvent_types.h"

#include <algorithm>
#include <ostream>

#include"libs/TToString.h"

namespace es {


ThriftPrivateMessageEvent::~ThriftPrivateMessageEvent() throw() {
}


void ThriftPrivateMessageEvent::__set_userName(const std::string& val) {
  this->userName = val;
__isset.userName = true;
}

void ThriftPrivateMessageEvent::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void ThriftPrivateMessageEvent::__set_esObject(const  ::es::ThriftFlattenedEsObject& val) {
  this->esObject = val;
__isset.esObject = true;
}

uint32_t ThriftPrivateMessageEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->esObject.read(iprot);
          this->__isset.esObject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftPrivateMessageEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftPrivateMessageEvent");

  if (this->__isset.userName) {
    xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->userName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.esObject) {
    xfer += oprot->writeFieldBegin("esObject", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->esObject.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftPrivateMessageEvent &a, ThriftPrivateMessageEvent &b) {
  using ::std::swap;
  swap(a.userName, b.userName);
  swap(a.message, b.message);
  swap(a.esObject, b.esObject);
  swap(a.__isset, b.__isset);
}

ThriftPrivateMessageEvent::ThriftPrivateMessageEvent(const ThriftPrivateMessageEvent& other0) {
  userName = other0.userName;
  message = other0.message;
  esObject = other0.esObject;
  __isset = other0.__isset;
}
ThriftPrivateMessageEvent& ThriftPrivateMessageEvent::operator=(const ThriftPrivateMessageEvent& other1) {
  userName = other1.userName;
  message = other1.message;
  esObject = other1.esObject;
  __isset = other1.__isset;
  return *this;
}
void ThriftPrivateMessageEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftPrivateMessageEvent(";
  out << "userName="; (__isset.userName ? (out << to_string(userName)) : (out << "<null>"));
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "esObject="; (__isset.esObject ? (out << to_string(esObject)) : (out << "<null>"));
  out << ")";
}

} // namespace
