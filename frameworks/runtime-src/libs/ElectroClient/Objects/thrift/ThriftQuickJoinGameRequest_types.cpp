/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftQuickJoinGameRequest_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftQuickJoinGameRequest::~ThriftQuickJoinGameRequest() throw() {
}


void ThriftQuickJoinGameRequest::__set_gameType(const std::string& val) {
  this->gameType = val;
}

void ThriftQuickJoinGameRequest::__set_zoneName(const std::string& val) {
  this->zoneName = val;
}

void ThriftQuickJoinGameRequest::__set_password(const std::string& val) {
  this->password = val;
}

void ThriftQuickJoinGameRequest::__set_locked(const bool val) {
  this->locked = val;
}

void ThriftQuickJoinGameRequest::__set_hidden(const bool val) {
  this->hidden = val;
}

void ThriftQuickJoinGameRequest::__set_createOnly(const bool val) {
  this->createOnly = val;
}

void ThriftQuickJoinGameRequest::__set_gameDetails(const  ::es::ThriftFlattenedEsObject& val) {
  this->gameDetails = val;
}

void ThriftQuickJoinGameRequest::__set_criteria(const  ::es::ThriftSearchCriteria& val) {
  this->criteria = val;
}

uint32_t ThriftQuickJoinGameRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gameType);
          this->__isset.gameType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zoneName);
          this->__isset.zoneName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hidden);
          this->__isset.hidden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->createOnly);
          this->__isset.createOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gameDetails.read(iprot);
          this->__isset.gameDetails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->criteria.read(iprot);
          this->__isset.criteria = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftQuickJoinGameRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftQuickJoinGameRequest");

  xfer += oprot->writeFieldBegin("gameType", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->gameType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zoneName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->zoneName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->locked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->hidden);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createOnly", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->createOnly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gameDetails", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->gameDetails.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("criteria", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->criteria.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftQuickJoinGameRequest &a, ThriftQuickJoinGameRequest &b) {
  using ::std::swap;
  swap(a.gameType, b.gameType);
  swap(a.zoneName, b.zoneName);
  swap(a.password, b.password);
  swap(a.locked, b.locked);
  swap(a.hidden, b.hidden);
  swap(a.createOnly, b.createOnly);
  swap(a.gameDetails, b.gameDetails);
  swap(a.criteria, b.criteria);
  swap(a.__isset, b.__isset);
}

ThriftQuickJoinGameRequest::ThriftQuickJoinGameRequest(const ThriftQuickJoinGameRequest& other0) {
  gameType = other0.gameType;
  zoneName = other0.zoneName;
  password = other0.password;
  locked = other0.locked;
  hidden = other0.hidden;
  createOnly = other0.createOnly;
  gameDetails = other0.gameDetails;
  criteria = other0.criteria;
  __isset = other0.__isset;
}
ThriftQuickJoinGameRequest& ThriftQuickJoinGameRequest::operator=(const ThriftQuickJoinGameRequest& other1) {
  gameType = other1.gameType;
  zoneName = other1.zoneName;
  password = other1.password;
  locked = other1.locked;
  hidden = other1.hidden;
  createOnly = other1.createOnly;
  gameDetails = other1.gameDetails;
  criteria = other1.criteria;
  __isset = other1.__isset;
  return *this;
}
void ThriftQuickJoinGameRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftQuickJoinGameRequest(";
  out << "gameType=" << to_string(gameType);
  out << ", " << "zoneName=" << to_string(zoneName);
  out << ", " << "password=" << to_string(password);
  out << ", " << "locked=" << to_string(locked);
  out << ", " << "hidden=" << to_string(hidden);
  out << ", " << "createOnly=" << to_string(createOnly);
  out << ", " << "gameDetails=" << to_string(gameDetails);
  out << ", " << "criteria=" << to_string(criteria);
  out << ")";
}

} // namespace
