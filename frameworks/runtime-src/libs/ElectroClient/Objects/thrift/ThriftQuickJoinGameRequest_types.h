/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftQuickJoinGameRequest_TYPES_H
#define ThriftQuickJoinGameRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"
#include "ThriftSearchCriteria_types.h"


namespace es {

class ThriftQuickJoinGameRequest;

typedef struct _ThriftQuickJoinGameRequest__isset {
  _ThriftQuickJoinGameRequest__isset() : gameType(false), zoneName(false), password(false), locked(false), hidden(false), createOnly(false), gameDetails(false), criteria(false) {}
  bool gameType :1;
  bool zoneName :1;
  bool password :1;
  bool locked :1;
  bool hidden :1;
  bool createOnly :1;
  bool gameDetails :1;
  bool criteria :1;
} _ThriftQuickJoinGameRequest__isset;

class ThriftQuickJoinGameRequest {
 public:

  ThriftQuickJoinGameRequest(const ThriftQuickJoinGameRequest&);
  ThriftQuickJoinGameRequest& operator=(const ThriftQuickJoinGameRequest&);
  ThriftQuickJoinGameRequest() : gameType(), zoneName(), password(), locked(0), hidden(0), createOnly(0) {
  }

  virtual ~ThriftQuickJoinGameRequest() throw();
  std::string gameType;
  std::string zoneName;
  std::string password;
  bool locked;
  bool hidden;
  bool createOnly;
   ::es::ThriftFlattenedEsObject gameDetails;
   ::es::ThriftSearchCriteria criteria;

  _ThriftQuickJoinGameRequest__isset __isset;

  void __set_gameType(const std::string& val);

  void __set_zoneName(const std::string& val);

  void __set_password(const std::string& val);

  void __set_locked(const bool val);

  void __set_hidden(const bool val);

  void __set_createOnly(const bool val);

  void __set_gameDetails(const  ::es::ThriftFlattenedEsObject& val);

  void __set_criteria(const  ::es::ThriftSearchCriteria& val);

  bool operator == (const ThriftQuickJoinGameRequest & rhs) const
  {
    if (!(gameType == rhs.gameType))
      return false;
    if (!(zoneName == rhs.zoneName))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(locked == rhs.locked))
      return false;
    if (!(hidden == rhs.hidden))
      return false;
    if (!(createOnly == rhs.createOnly))
      return false;
    if (!(gameDetails == rhs.gameDetails))
      return false;
    if (!(criteria == rhs.criteria))
      return false;
    return true;
  }
  bool operator != (const ThriftQuickJoinGameRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftQuickJoinGameRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftQuickJoinGameRequest &a, ThriftQuickJoinGameRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftQuickJoinGameRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
