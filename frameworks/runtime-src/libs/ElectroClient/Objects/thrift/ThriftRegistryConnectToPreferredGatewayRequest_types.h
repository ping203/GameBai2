/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftRegistryConnectToPreferredGatewayRequest_TYPES_H
#define ThriftRegistryConnectToPreferredGatewayRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftProtocol_types.h"


namespace es {

class ThriftRegistryConnectToPreferredGatewayRequest;

typedef struct _ThriftRegistryConnectToPreferredGatewayRequest__isset {
  _ThriftRegistryConnectToPreferredGatewayRequest__isset() : zoneId(false), host(false), port(false), protocolToUse(false) {}
  bool zoneId :1;
  bool host :1;
  bool port :1;
  bool protocolToUse :1;
} _ThriftRegistryConnectToPreferredGatewayRequest__isset;

class ThriftRegistryConnectToPreferredGatewayRequest {
 public:

  ThriftRegistryConnectToPreferredGatewayRequest(const ThriftRegistryConnectToPreferredGatewayRequest&);
  ThriftRegistryConnectToPreferredGatewayRequest& operator=(const ThriftRegistryConnectToPreferredGatewayRequest&);
  ThriftRegistryConnectToPreferredGatewayRequest() : zoneId(0), host(), port(0), protocolToUse(( ::es::ThriftProtocol::type)0) {
  }

  virtual ~ThriftRegistryConnectToPreferredGatewayRequest() throw();
  int32_t zoneId;
  std::string host;
  int32_t port;
   ::es::ThriftProtocol::type protocolToUse;

  _ThriftRegistryConnectToPreferredGatewayRequest__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  void __set_protocolToUse(const  ::es::ThriftProtocol::type val);

  bool operator == (const ThriftRegistryConnectToPreferredGatewayRequest & rhs) const
  {
    if (!(zoneId == rhs.zoneId))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(protocolToUse == rhs.protocolToUse))
      return false;
    return true;
  }
  bool operator != (const ThriftRegistryConnectToPreferredGatewayRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRegistryConnectToPreferredGatewayRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftRegistryConnectToPreferredGatewayRequest &a, ThriftRegistryConnectToPreferredGatewayRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftRegistryConnectToPreferredGatewayRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
