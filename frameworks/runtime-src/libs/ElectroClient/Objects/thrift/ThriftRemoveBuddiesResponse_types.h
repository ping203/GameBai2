/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftRemoveBuddiesResponse_TYPES_H
#define ThriftRemoveBuddiesResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftRemoveBuddiesResponse;

typedef struct _ThriftRemoveBuddiesResponse__isset {
  _ThriftRemoveBuddiesResponse__isset() : buddiesRemoved(false), buddiesNotRemoved(false) {}
  bool buddiesRemoved :1;
  bool buddiesNotRemoved :1;
} _ThriftRemoveBuddiesResponse__isset;

class ThriftRemoveBuddiesResponse {
 public:

  ThriftRemoveBuddiesResponse(const ThriftRemoveBuddiesResponse&);
  ThriftRemoveBuddiesResponse& operator=(const ThriftRemoveBuddiesResponse&);
  ThriftRemoveBuddiesResponse() {
  }

  virtual ~ThriftRemoveBuddiesResponse() throw();
  std::vector<std::string>  buddiesRemoved;
  std::vector<std::string>  buddiesNotRemoved;

  _ThriftRemoveBuddiesResponse__isset __isset;

  void __set_buddiesRemoved(const std::vector<std::string> & val);

  void __set_buddiesNotRemoved(const std::vector<std::string> & val);

  bool operator == (const ThriftRemoveBuddiesResponse & rhs) const
  {
    if (!(buddiesRemoved == rhs.buddiesRemoved))
      return false;
    if (!(buddiesNotRemoved == rhs.buddiesNotRemoved))
      return false;
    return true;
  }
  bool operator != (const ThriftRemoveBuddiesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRemoveBuddiesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftRemoveBuddiesResponse &a, ThriftRemoveBuddiesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftRemoveBuddiesResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
