/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftRemoveUDPConnectionResponse_TYPES_H
#define ThriftRemoveUDPConnectionResponse_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftErrorType_types.h"


namespace es {

class ThriftRemoveUDPConnectionResponse;

typedef struct _ThriftRemoveUDPConnectionResponse__isset {
  _ThriftRemoveUDPConnectionResponse__isset() : successful(false), error(false) {}
  bool successful :1;
  bool error :1;
} _ThriftRemoveUDPConnectionResponse__isset;

class ThriftRemoveUDPConnectionResponse {
 public:

  ThriftRemoveUDPConnectionResponse(const ThriftRemoveUDPConnectionResponse&);
  ThriftRemoveUDPConnectionResponse& operator=(const ThriftRemoveUDPConnectionResponse&);
  ThriftRemoveUDPConnectionResponse() : successful(0), error(( ::es::ThriftErrorType::type)0) {
  }

  virtual ~ThriftRemoveUDPConnectionResponse() throw();
  bool successful;
   ::es::ThriftErrorType::type error;

  _ThriftRemoveUDPConnectionResponse__isset __isset;

  void __set_successful(const bool val);

  void __set_error(const  ::es::ThriftErrorType::type val);

  bool operator == (const ThriftRemoveUDPConnectionResponse & rhs) const
  {
    if (!(successful == rhs.successful))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ThriftRemoveUDPConnectionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRemoveUDPConnectionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftRemoveUDPConnectionResponse &a, ThriftRemoveUDPConnectionResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftRemoveUDPConnectionResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
