/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftRoomListEntry_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftRoomListEntry::~ThriftRoomListEntry() throw() {
}


void ThriftRoomListEntry::__set_roomId(const int32_t val) {
  this->roomId = val;
__isset.roomId = true;
}

void ThriftRoomListEntry::__set_zoneId(const int32_t val) {
  this->zoneId = val;
__isset.zoneId = true;
}

void ThriftRoomListEntry::__set_roomName(const std::string& val) {
  this->roomName = val;
__isset.roomName = true;
}

void ThriftRoomListEntry::__set_userCount(const int32_t val) {
  this->userCount = val;
__isset.userCount = true;
}

void ThriftRoomListEntry::__set_roomDescription(const std::string& val) {
  this->roomDescription = val;
__isset.roomDescription = true;
}

void ThriftRoomListEntry::__set_capacity(const int32_t val) {
  this->capacity = val;
__isset.capacity = true;
}

void ThriftRoomListEntry::__set_hasPassword(const bool val) {
  this->hasPassword = val;
__isset.hasPassword = true;
}

uint32_t ThriftRoomListEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomName);
          this->__isset.roomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userCount);
          this->__isset.userCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomDescription);
          this->__isset.roomDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->capacity);
          this->__isset.capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasPassword);
          this->__isset.hasPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftRoomListEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftRoomListEntry");

  if (this->__isset.roomId) {
    xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->roomId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.zoneId) {
    xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->zoneId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomName) {
    xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->roomName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userCount) {
    xfer += oprot->writeFieldBegin("userCount", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->userCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomDescription) {
    xfer += oprot->writeFieldBegin("roomDescription", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->roomDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.capacity) {
    xfer += oprot->writeFieldBegin("capacity", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->capacity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hasPassword) {
    xfer += oprot->writeFieldBegin("hasPassword", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->hasPassword);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftRoomListEntry &a, ThriftRoomListEntry &b) {
  using ::std::swap;
  swap(a.roomId, b.roomId);
  swap(a.zoneId, b.zoneId);
  swap(a.roomName, b.roomName);
  swap(a.userCount, b.userCount);
  swap(a.roomDescription, b.roomDescription);
  swap(a.capacity, b.capacity);
  swap(a.hasPassword, b.hasPassword);
  swap(a.__isset, b.__isset);
}

ThriftRoomListEntry::ThriftRoomListEntry(const ThriftRoomListEntry& other0) {
  roomId = other0.roomId;
  zoneId = other0.zoneId;
  roomName = other0.roomName;
  userCount = other0.userCount;
  roomDescription = other0.roomDescription;
  capacity = other0.capacity;
  hasPassword = other0.hasPassword;
  __isset = other0.__isset;
}
ThriftRoomListEntry& ThriftRoomListEntry::operator=(const ThriftRoomListEntry& other1) {
  roomId = other1.roomId;
  zoneId = other1.zoneId;
  roomName = other1.roomName;
  userCount = other1.userCount;
  roomDescription = other1.roomDescription;
  capacity = other1.capacity;
  hasPassword = other1.hasPassword;
  __isset = other1.__isset;
  return *this;
}
void ThriftRoomListEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftRoomListEntry(";
  out << "roomId="; (__isset.roomId ? (out << to_string(roomId)) : (out << "<null>"));
  out << ", " << "zoneId="; (__isset.zoneId ? (out << to_string(zoneId)) : (out << "<null>"));
  out << ", " << "roomName="; (__isset.roomName ? (out << to_string(roomName)) : (out << "<null>"));
  out << ", " << "userCount="; (__isset.userCount ? (out << to_string(userCount)) : (out << "<null>"));
  out << ", " << "roomDescription="; (__isset.roomDescription ? (out << to_string(roomDescription)) : (out << "<null>"));
  out << ", " << "capacity="; (__isset.capacity ? (out << to_string(capacity)) : (out << "<null>"));
  out << ", " << "hasPassword="; (__isset.hasPassword ? (out << to_string(hasPassword)) : (out << "<null>"));
  out << ")";
}

} // namespace
