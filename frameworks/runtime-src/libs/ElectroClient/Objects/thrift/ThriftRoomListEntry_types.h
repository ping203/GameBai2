/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftRoomListEntry_TYPES_H
#define ThriftRoomListEntry_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftRoomListEntry;

typedef struct _ThriftRoomListEntry__isset {
  _ThriftRoomListEntry__isset() : roomId(false), zoneId(false), roomName(false), userCount(false), roomDescription(false), capacity(false), hasPassword(false) {}
  bool roomId :1;
  bool zoneId :1;
  bool roomName :1;
  bool userCount :1;
  bool roomDescription :1;
  bool capacity :1;
  bool hasPassword :1;
} _ThriftRoomListEntry__isset;

class ThriftRoomListEntry {
 public:

  ThriftRoomListEntry(const ThriftRoomListEntry&);
  ThriftRoomListEntry& operator=(const ThriftRoomListEntry&);
  ThriftRoomListEntry() : roomId(0), zoneId(0), roomName(), userCount(0), roomDescription(), capacity(0), hasPassword(0) {
  }

  virtual ~ThriftRoomListEntry() throw();
  int32_t roomId;
  int32_t zoneId;
  std::string roomName;
  int32_t userCount;
  std::string roomDescription;
  int32_t capacity;
  bool hasPassword;

  _ThriftRoomListEntry__isset __isset;

  void __set_roomId(const int32_t val);

  void __set_zoneId(const int32_t val);

  void __set_roomName(const std::string& val);

  void __set_userCount(const int32_t val);

  void __set_roomDescription(const std::string& val);

  void __set_capacity(const int32_t val);

  void __set_hasPassword(const bool val);

  bool operator == (const ThriftRoomListEntry & rhs) const
  {
    if (__isset.roomId != rhs.__isset.roomId)
      return false;
    else if (__isset.roomId && !(roomId == rhs.roomId))
      return false;
    if (__isset.zoneId != rhs.__isset.zoneId)
      return false;
    else if (__isset.zoneId && !(zoneId == rhs.zoneId))
      return false;
    if (__isset.roomName != rhs.__isset.roomName)
      return false;
    else if (__isset.roomName && !(roomName == rhs.roomName))
      return false;
    if (__isset.userCount != rhs.__isset.userCount)
      return false;
    else if (__isset.userCount && !(userCount == rhs.userCount))
      return false;
    if (__isset.roomDescription != rhs.__isset.roomDescription)
      return false;
    else if (__isset.roomDescription && !(roomDescription == rhs.roomDescription))
      return false;
    if (__isset.capacity != rhs.__isset.capacity)
      return false;
    else if (__isset.capacity && !(capacity == rhs.capacity))
      return false;
    if (__isset.hasPassword != rhs.__isset.hasPassword)
      return false;
    else if (__isset.hasPassword && !(hasPassword == rhs.hasPassword))
      return false;
    return true;
  }
  bool operator != (const ThriftRoomListEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRoomListEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftRoomListEntry &a, ThriftRoomListEntry &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftRoomListEntry& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
