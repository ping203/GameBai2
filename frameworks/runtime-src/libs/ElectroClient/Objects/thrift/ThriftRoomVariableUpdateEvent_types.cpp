/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftRoomVariableUpdateEvent_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftRoomVariableUpdateEvent::~ThriftRoomVariableUpdateEvent() throw() {
}


void ThriftRoomVariableUpdateEvent::__set_zoneId(const int32_t val) {
  this->zoneId = val;
}

void ThriftRoomVariableUpdateEvent::__set_roomId(const int32_t val) {
  this->roomId = val;
}

void ThriftRoomVariableUpdateEvent::__set_name(const std::string& val) {
  this->name = val;
}

void ThriftRoomVariableUpdateEvent::__set_valueChanged(const bool val) {
  this->valueChanged = val;
}

void ThriftRoomVariableUpdateEvent::__set_value(const  ::es::ThriftFlattenedEsObject& val) {
  this->value = val;
}

void ThriftRoomVariableUpdateEvent::__set_persistent(const bool val) {
  this->persistent = val;
}

void ThriftRoomVariableUpdateEvent::__set_lockStatusChanged(const bool val) {
  this->lockStatusChanged = val;
}

void ThriftRoomVariableUpdateEvent::__set_locked(const bool val) {
  this->locked = val;
}

void ThriftRoomVariableUpdateEvent::__set_action(const  ::es::ThriftRoomVariableUpdateAction::type val) {
  this->action = val;
}

uint32_t ThriftRoomVariableUpdateEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->valueChanged);
          this->__isset.valueChanged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->persistent);
          this->__isset.persistent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lockStatusChanged);
          this->__isset.lockStatusChanged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->action = ( ::es::ThriftRoomVariableUpdateAction::type)ecast0;
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftRoomVariableUpdateEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftRoomVariableUpdateEvent");

  xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->zoneId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->roomId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("valueChanged", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->valueChanged);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("persistent", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->persistent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lockStatusChanged", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->lockStatusChanged);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->locked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->action);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftRoomVariableUpdateEvent &a, ThriftRoomVariableUpdateEvent &b) {
  using ::std::swap;
  swap(a.zoneId, b.zoneId);
  swap(a.roomId, b.roomId);
  swap(a.name, b.name);
  swap(a.valueChanged, b.valueChanged);
  swap(a.value, b.value);
  swap(a.persistent, b.persistent);
  swap(a.lockStatusChanged, b.lockStatusChanged);
  swap(a.locked, b.locked);
  swap(a.action, b.action);
  swap(a.__isset, b.__isset);
}

ThriftRoomVariableUpdateEvent::ThriftRoomVariableUpdateEvent(const ThriftRoomVariableUpdateEvent& other1) {
  zoneId = other1.zoneId;
  roomId = other1.roomId;
  name = other1.name;
  valueChanged = other1.valueChanged;
  value = other1.value;
  persistent = other1.persistent;
  lockStatusChanged = other1.lockStatusChanged;
  locked = other1.locked;
  action = other1.action;
  __isset = other1.__isset;
}
ThriftRoomVariableUpdateEvent& ThriftRoomVariableUpdateEvent::operator=(const ThriftRoomVariableUpdateEvent& other2) {
  zoneId = other2.zoneId;
  roomId = other2.roomId;
  name = other2.name;
  valueChanged = other2.valueChanged;
  value = other2.value;
  persistent = other2.persistent;
  lockStatusChanged = other2.lockStatusChanged;
  locked = other2.locked;
  action = other2.action;
  __isset = other2.__isset;
  return *this;
}
void ThriftRoomVariableUpdateEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftRoomVariableUpdateEvent(";
  out << "zoneId=" << to_string(zoneId);
  out << ", " << "roomId=" << to_string(roomId);
  out << ", " << "name=" << to_string(name);
  out << ", " << "valueChanged=" << to_string(valueChanged);
  out << ", " << "value=" << to_string(value);
  out << ", " << "persistent=" << to_string(persistent);
  out << ", " << "lockStatusChanged=" << to_string(lockStatusChanged);
  out << ", " << "locked=" << to_string(locked);
  out << ", " << "action=" << to_string(action);
  out << ")";
}

} // namespace
