/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftRoomVariableUpdateEvent_TYPES_H
#define ThriftRoomVariableUpdateEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"
#include "ThriftRoomVariableUpdateAction_types.h"


namespace es {

class ThriftRoomVariableUpdateEvent;

typedef struct _ThriftRoomVariableUpdateEvent__isset {
  _ThriftRoomVariableUpdateEvent__isset() : zoneId(false), roomId(false), name(false), valueChanged(false), value(false), persistent(false), lockStatusChanged(false), locked(false), action(false) {}
  bool zoneId :1;
  bool roomId :1;
  bool name :1;
  bool valueChanged :1;
  bool value :1;
  bool persistent :1;
  bool lockStatusChanged :1;
  bool locked :1;
  bool action :1;
} _ThriftRoomVariableUpdateEvent__isset;

class ThriftRoomVariableUpdateEvent {
 public:

  ThriftRoomVariableUpdateEvent(const ThriftRoomVariableUpdateEvent&);
  ThriftRoomVariableUpdateEvent& operator=(const ThriftRoomVariableUpdateEvent&);
  ThriftRoomVariableUpdateEvent() : zoneId(0), roomId(0), name(), valueChanged(0), persistent(0), lockStatusChanged(0), locked(0), action(( ::es::ThriftRoomVariableUpdateAction::type)0) {
  }

  virtual ~ThriftRoomVariableUpdateEvent() throw();
  int32_t zoneId;
  int32_t roomId;
  std::string name;
  bool valueChanged;
   ::es::ThriftFlattenedEsObject value;
  bool persistent;
  bool lockStatusChanged;
  bool locked;
   ::es::ThriftRoomVariableUpdateAction::type action;

  _ThriftRoomVariableUpdateEvent__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_name(const std::string& val);

  void __set_valueChanged(const bool val);

  void __set_value(const  ::es::ThriftFlattenedEsObject& val);

  void __set_persistent(const bool val);

  void __set_lockStatusChanged(const bool val);

  void __set_locked(const bool val);

  void __set_action(const  ::es::ThriftRoomVariableUpdateAction::type val);

  bool operator == (const ThriftRoomVariableUpdateEvent & rhs) const
  {
    if (!(zoneId == rhs.zoneId))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(valueChanged == rhs.valueChanged))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(persistent == rhs.persistent))
      return false;
    if (!(lockStatusChanged == rhs.lockStatusChanged))
      return false;
    if (!(locked == rhs.locked))
      return false;
    if (!(action == rhs.action))
      return false;
    return true;
  }
  bool operator != (const ThriftRoomVariableUpdateEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRoomVariableUpdateEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftRoomVariableUpdateEvent &a, ThriftRoomVariableUpdateEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftRoomVariableUpdateEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
