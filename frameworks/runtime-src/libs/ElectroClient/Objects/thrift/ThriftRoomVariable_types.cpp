/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftRoomVariable_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftRoomVariable::~ThriftRoomVariable() throw() {
}


void ThriftRoomVariable::__set_persistent(const bool val) {
  this->persistent = val;
__isset.persistent = true;
}

void ThriftRoomVariable::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void ThriftRoomVariable::__set_value(const  ::es::ThriftFlattenedEsObject& val) {
  this->value = val;
__isset.value = true;
}

void ThriftRoomVariable::__set_locked(const bool val) {
  this->locked = val;
__isset.locked = true;
}

uint32_t ThriftRoomVariable::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->persistent);
          this->__isset.persistent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftRoomVariable::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftRoomVariable");

  if (this->__isset.persistent) {
    xfer += oprot->writeFieldBegin("persistent", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->persistent);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->value.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.locked) {
    xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->locked);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftRoomVariable &a, ThriftRoomVariable &b) {
  using ::std::swap;
  swap(a.persistent, b.persistent);
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.locked, b.locked);
  swap(a.__isset, b.__isset);
}

ThriftRoomVariable::ThriftRoomVariable(const ThriftRoomVariable& other0) {
  persistent = other0.persistent;
  name = other0.name;
  value = other0.value;
  locked = other0.locked;
  __isset = other0.__isset;
}
ThriftRoomVariable& ThriftRoomVariable::operator=(const ThriftRoomVariable& other1) {
  persistent = other1.persistent;
  name = other1.name;
  value = other1.value;
  locked = other1.locked;
  __isset = other1.__isset;
  return *this;
}
void ThriftRoomVariable::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftRoomVariable(";
  out << "persistent="; (__isset.persistent ? (out << to_string(persistent)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ", " << "locked="; (__isset.locked ? (out << to_string(locked)) : (out << "<null>"));
  out << ")";
}

} // namespace
