/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftRoomVariable_TYPES_H
#define ThriftRoomVariable_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"


namespace es {

class ThriftRoomVariable;

typedef struct _ThriftRoomVariable__isset {
  _ThriftRoomVariable__isset() : persistent(false), name(false), value(false), locked(false) {}
  bool persistent :1;
  bool name :1;
  bool value :1;
  bool locked :1;
} _ThriftRoomVariable__isset;

class ThriftRoomVariable {
 public:

  ThriftRoomVariable(const ThriftRoomVariable&);
  ThriftRoomVariable& operator=(const ThriftRoomVariable&);
  ThriftRoomVariable() : persistent(0), name(), locked(0) {
  }

  virtual ~ThriftRoomVariable() throw();
  bool persistent;
  std::string name;
   ::es::ThriftFlattenedEsObject value;
  bool locked;

  _ThriftRoomVariable__isset __isset;

  void __set_persistent(const bool val);

  void __set_name(const std::string& val);

  void __set_value(const  ::es::ThriftFlattenedEsObject& val);

  void __set_locked(const bool val);

  bool operator == (const ThriftRoomVariable & rhs) const
  {
    if (__isset.persistent != rhs.__isset.persistent)
      return false;
    else if (__isset.persistent && !(persistent == rhs.persistent))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    if (__isset.locked != rhs.__isset.locked)
      return false;
    else if (__isset.locked && !(locked == rhs.locked))
      return false;
    return true;
  }
  bool operator != (const ThriftRoomVariable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRoomVariable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftRoomVariable &a, ThriftRoomVariable &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftRoomVariable& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
