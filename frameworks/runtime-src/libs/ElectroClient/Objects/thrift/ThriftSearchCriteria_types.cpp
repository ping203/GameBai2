/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftSearchCriteria_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftSearchCriteria::~ThriftSearchCriteria() throw() {
}


void ThriftSearchCriteria::__set_gameId(const int32_t val) {
  this->gameId = val;
}

void ThriftSearchCriteria::__set_locked(const bool val) {
  this->locked = val;
}

void ThriftSearchCriteria::__set_lockedSet(const bool val) {
  this->lockedSet = val;
}

void ThriftSearchCriteria::__set_gameType(const std::string& val) {
  this->gameType = val;
}

void ThriftSearchCriteria::__set_gameDetails(const  ::es::ThriftFlattenedEsObject& val) {
  this->gameDetails = val;
}

uint32_t ThriftSearchCriteria::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gameId);
          this->__isset.gameId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lockedSet);
          this->__isset.lockedSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gameType);
          this->__isset.gameType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gameDetails.read(iprot);
          this->__isset.gameDetails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftSearchCriteria::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftSearchCriteria");

  xfer += oprot->writeFieldBegin("gameId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->gameId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->locked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lockedSet", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->lockedSet);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gameType", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->gameType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gameDetails", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->gameDetails.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftSearchCriteria &a, ThriftSearchCriteria &b) {
  using ::std::swap;
  swap(a.gameId, b.gameId);
  swap(a.locked, b.locked);
  swap(a.lockedSet, b.lockedSet);
  swap(a.gameType, b.gameType);
  swap(a.gameDetails, b.gameDetails);
  swap(a.__isset, b.__isset);
}

ThriftSearchCriteria::ThriftSearchCriteria(const ThriftSearchCriteria& other0) {
  gameId = other0.gameId;
  locked = other0.locked;
  lockedSet = other0.lockedSet;
  gameType = other0.gameType;
  gameDetails = other0.gameDetails;
  __isset = other0.__isset;
}
ThriftSearchCriteria& ThriftSearchCriteria::operator=(const ThriftSearchCriteria& other1) {
  gameId = other1.gameId;
  locked = other1.locked;
  lockedSet = other1.lockedSet;
  gameType = other1.gameType;
  gameDetails = other1.gameDetails;
  __isset = other1.__isset;
  return *this;
}
void ThriftSearchCriteria::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftSearchCriteria(";
  out << "gameId=" << to_string(gameId);
  out << ", " << "locked=" << to_string(locked);
  out << ", " << "lockedSet=" << to_string(lockedSet);
  out << ", " << "gameType=" << to_string(gameType);
  out << ", " << "gameDetails=" << to_string(gameDetails);
  out << ")";
}

} // namespace
