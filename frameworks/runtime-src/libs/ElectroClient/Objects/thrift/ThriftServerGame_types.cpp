/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftServerGame_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftServerGame::~ThriftServerGame() throw() {
}


void ThriftServerGame::__set_gameDetails(const  ::es::ThriftFlattenedEsObject& val) {
  this->gameDetails = val;
}

void ThriftServerGame::__set_id(const int32_t val) {
  this->id = val;
}

void ThriftServerGame::__set_roomId(const int32_t val) {
  this->roomId = val;
}

void ThriftServerGame::__set_zoneId(const int32_t val) {
  this->zoneId = val;
}

void ThriftServerGame::__set_locked(const bool val) {
  this->locked = val;
}

void ThriftServerGame::__set_passwordProtected(const bool val) {
  this->passwordProtected = val;
}

uint32_t ThriftServerGame::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gameDetails.read(iprot);
          this->__isset.gameDetails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->passwordProtected);
          this->__isset.passwordProtected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftServerGame::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftServerGame");

  xfer += oprot->writeFieldBegin("gameDetails", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->gameDetails.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->roomId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->zoneId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->locked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwordProtected", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->passwordProtected);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftServerGame &a, ThriftServerGame &b) {
  using ::std::swap;
  swap(a.gameDetails, b.gameDetails);
  swap(a.id, b.id);
  swap(a.roomId, b.roomId);
  swap(a.zoneId, b.zoneId);
  swap(a.locked, b.locked);
  swap(a.passwordProtected, b.passwordProtected);
  swap(a.__isset, b.__isset);
}

ThriftServerGame::ThriftServerGame(const ThriftServerGame& other0) {
  gameDetails = other0.gameDetails;
  id = other0.id;
  roomId = other0.roomId;
  zoneId = other0.zoneId;
  locked = other0.locked;
  passwordProtected = other0.passwordProtected;
  __isset = other0.__isset;
}
ThriftServerGame& ThriftServerGame::operator=(const ThriftServerGame& other1) {
  gameDetails = other1.gameDetails;
  id = other1.id;
  roomId = other1.roomId;
  zoneId = other1.zoneId;
  locked = other1.locked;
  passwordProtected = other1.passwordProtected;
  __isset = other1.__isset;
  return *this;
}
void ThriftServerGame::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftServerGame(";
  out << "gameDetails=" << to_string(gameDetails);
  out << ", " << "id=" << to_string(id);
  out << ", " << "roomId=" << to_string(roomId);
  out << ", " << "zoneId=" << to_string(zoneId);
  out << ", " << "locked=" << to_string(locked);
  out << ", " << "passwordProtected=" << to_string(passwordProtected);
  out << ")";
}

} // namespace
