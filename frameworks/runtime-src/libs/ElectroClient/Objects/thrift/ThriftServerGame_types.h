/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftServerGame_TYPES_H
#define ThriftServerGame_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"


namespace es {

class ThriftServerGame;

typedef struct _ThriftServerGame__isset {
  _ThriftServerGame__isset() : gameDetails(false), id(false), roomId(false), zoneId(false), locked(false), passwordProtected(false) {}
  bool gameDetails :1;
  bool id :1;
  bool roomId :1;
  bool zoneId :1;
  bool locked :1;
  bool passwordProtected :1;
} _ThriftServerGame__isset;

class ThriftServerGame {
 public:

  ThriftServerGame(const ThriftServerGame&);
  ThriftServerGame& operator=(const ThriftServerGame&);
  ThriftServerGame() : id(0), roomId(0), zoneId(0), locked(0), passwordProtected(0) {
  }

  virtual ~ThriftServerGame() throw();
   ::es::ThriftFlattenedEsObject gameDetails;
  int32_t id;
  int32_t roomId;
  int32_t zoneId;
  bool locked;
  bool passwordProtected;

  _ThriftServerGame__isset __isset;

  void __set_gameDetails(const  ::es::ThriftFlattenedEsObject& val);

  void __set_id(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_zoneId(const int32_t val);

  void __set_locked(const bool val);

  void __set_passwordProtected(const bool val);

  bool operator == (const ThriftServerGame & rhs) const
  {
    if (!(gameDetails == rhs.gameDetails))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    if (!(zoneId == rhs.zoneId))
      return false;
    if (!(locked == rhs.locked))
      return false;
    if (!(passwordProtected == rhs.passwordProtected))
      return false;
    return true;
  }
  bool operator != (const ThriftServerGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftServerGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftServerGame &a, ThriftServerGame &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftServerGame& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
