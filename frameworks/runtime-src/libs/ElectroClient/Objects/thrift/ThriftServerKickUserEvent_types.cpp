/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftServerKickUserEvent_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftServerKickUserEvent::~ThriftServerKickUserEvent() throw() {
}


void ThriftServerKickUserEvent::__set_error(const  ::es::ThriftErrorType::type val) {
  this->error = val;
__isset.error = true;
}

void ThriftServerKickUserEvent::__set_esObject(const  ::es::ThriftFlattenedEsObjectRO& val) {
  this->esObject = val;
__isset.esObject = true;
}

uint32_t ThriftServerKickUserEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->error = ( ::es::ThriftErrorType::type)ecast0;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->esObject.read(iprot);
          this->__isset.esObject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftServerKickUserEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftServerKickUserEvent");

  if (this->__isset.error) {
    xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->error);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.esObject) {
    xfer += oprot->writeFieldBegin("esObject", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->esObject.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftServerKickUserEvent &a, ThriftServerKickUserEvent &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.esObject, b.esObject);
  swap(a.__isset, b.__isset);
}

ThriftServerKickUserEvent::ThriftServerKickUserEvent(const ThriftServerKickUserEvent& other1) {
  error = other1.error;
  esObject = other1.esObject;
  __isset = other1.__isset;
}
ThriftServerKickUserEvent& ThriftServerKickUserEvent::operator=(const ThriftServerKickUserEvent& other2) {
  error = other2.error;
  esObject = other2.esObject;
  __isset = other2.__isset;
  return *this;
}
void ThriftServerKickUserEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftServerKickUserEvent(";
  out << "error="; (__isset.error ? (out << to_string(error)) : (out << "<null>"));
  out << ", " << "esObject="; (__isset.esObject ? (out << to_string(esObject)) : (out << "<null>"));
  out << ")";
}

} // namespace
