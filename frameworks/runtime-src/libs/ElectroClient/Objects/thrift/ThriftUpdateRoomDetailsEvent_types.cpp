/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftUpdateRoomDetailsEvent_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftUpdateRoomDetailsEvent::~ThriftUpdateRoomDetailsEvent() throw() {
}


void ThriftUpdateRoomDetailsEvent::__set_zoneId(const int32_t val) {
  this->zoneId = val;
}

void ThriftUpdateRoomDetailsEvent::__set_roomId(const int32_t val) {
  this->roomId = val;
}

void ThriftUpdateRoomDetailsEvent::__set_capacityUpdated(const bool val) {
  this->capacityUpdated = val;
}

void ThriftUpdateRoomDetailsEvent::__set_capacity(const int32_t val) {
  this->capacity = val;
}

void ThriftUpdateRoomDetailsEvent::__set_roomDescriptionUpdated(const bool val) {
  this->roomDescriptionUpdated = val;
}

void ThriftUpdateRoomDetailsEvent::__set_roomDescription(const std::string& val) {
  this->roomDescription = val;
}

void ThriftUpdateRoomDetailsEvent::__set_roomNameUpdated(const bool val) {
  this->roomNameUpdated = val;
}

void ThriftUpdateRoomDetailsEvent::__set_roomName(const std::string& val) {
  this->roomName = val;
}

void ThriftUpdateRoomDetailsEvent::__set_hasPassword(const bool val) {
  this->hasPassword = val;
}

void ThriftUpdateRoomDetailsEvent::__set_hasPasswordUpdated(const bool val) {
  this->hasPasswordUpdated = val;
}

void ThriftUpdateRoomDetailsEvent::__set_hiddenUpdated(const bool val) {
  this->hiddenUpdated = val;
}

void ThriftUpdateRoomDetailsEvent::__set_hidden(const bool val) {
  this->hidden = val;
}

uint32_t ThriftUpdateRoomDetailsEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capacityUpdated);
          this->__isset.capacityUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->capacity);
          this->__isset.capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->roomDescriptionUpdated);
          this->__isset.roomDescriptionUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomDescription);
          this->__isset.roomDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->roomNameUpdated);
          this->__isset.roomNameUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomName);
          this->__isset.roomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasPassword);
          this->__isset.hasPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasPasswordUpdated);
          this->__isset.hasPasswordUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hiddenUpdated);
          this->__isset.hiddenUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hidden);
          this->__isset.hidden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftUpdateRoomDetailsEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftUpdateRoomDetailsEvent");

  xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->zoneId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->roomId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capacityUpdated", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->capacityUpdated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capacity", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomDescriptionUpdated", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->roomDescriptionUpdated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomDescription", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->roomDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomNameUpdated", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->roomNameUpdated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->roomName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasPassword", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->hasPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasPasswordUpdated", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->hasPasswordUpdated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hiddenUpdated", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->hiddenUpdated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->hidden);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftUpdateRoomDetailsEvent &a, ThriftUpdateRoomDetailsEvent &b) {
  using ::std::swap;
  swap(a.zoneId, b.zoneId);
  swap(a.roomId, b.roomId);
  swap(a.capacityUpdated, b.capacityUpdated);
  swap(a.capacity, b.capacity);
  swap(a.roomDescriptionUpdated, b.roomDescriptionUpdated);
  swap(a.roomDescription, b.roomDescription);
  swap(a.roomNameUpdated, b.roomNameUpdated);
  swap(a.roomName, b.roomName);
  swap(a.hasPassword, b.hasPassword);
  swap(a.hasPasswordUpdated, b.hasPasswordUpdated);
  swap(a.hiddenUpdated, b.hiddenUpdated);
  swap(a.hidden, b.hidden);
  swap(a.__isset, b.__isset);
}

ThriftUpdateRoomDetailsEvent::ThriftUpdateRoomDetailsEvent(const ThriftUpdateRoomDetailsEvent& other0) {
  zoneId = other0.zoneId;
  roomId = other0.roomId;
  capacityUpdated = other0.capacityUpdated;
  capacity = other0.capacity;
  roomDescriptionUpdated = other0.roomDescriptionUpdated;
  roomDescription = other0.roomDescription;
  roomNameUpdated = other0.roomNameUpdated;
  roomName = other0.roomName;
  hasPassword = other0.hasPassword;
  hasPasswordUpdated = other0.hasPasswordUpdated;
  hiddenUpdated = other0.hiddenUpdated;
  hidden = other0.hidden;
  __isset = other0.__isset;
}
ThriftUpdateRoomDetailsEvent& ThriftUpdateRoomDetailsEvent::operator=(const ThriftUpdateRoomDetailsEvent& other1) {
  zoneId = other1.zoneId;
  roomId = other1.roomId;
  capacityUpdated = other1.capacityUpdated;
  capacity = other1.capacity;
  roomDescriptionUpdated = other1.roomDescriptionUpdated;
  roomDescription = other1.roomDescription;
  roomNameUpdated = other1.roomNameUpdated;
  roomName = other1.roomName;
  hasPassword = other1.hasPassword;
  hasPasswordUpdated = other1.hasPasswordUpdated;
  hiddenUpdated = other1.hiddenUpdated;
  hidden = other1.hidden;
  __isset = other1.__isset;
  return *this;
}
void ThriftUpdateRoomDetailsEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftUpdateRoomDetailsEvent(";
  out << "zoneId=" << to_string(zoneId);
  out << ", " << "roomId=" << to_string(roomId);
  out << ", " << "capacityUpdated=" << to_string(capacityUpdated);
  out << ", " << "capacity=" << to_string(capacity);
  out << ", " << "roomDescriptionUpdated=" << to_string(roomDescriptionUpdated);
  out << ", " << "roomDescription=" << to_string(roomDescription);
  out << ", " << "roomNameUpdated=" << to_string(roomNameUpdated);
  out << ", " << "roomName=" << to_string(roomName);
  out << ", " << "hasPassword=" << to_string(hasPassword);
  out << ", " << "hasPasswordUpdated=" << to_string(hasPasswordUpdated);
  out << ", " << "hiddenUpdated=" << to_string(hiddenUpdated);
  out << ", " << "hidden=" << to_string(hidden);
  out << ")";
}

} // namespace
