/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftUpdateRoomDetailsEvent_TYPES_H
#define ThriftUpdateRoomDetailsEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftUpdateRoomDetailsEvent;

typedef struct _ThriftUpdateRoomDetailsEvent__isset {
  _ThriftUpdateRoomDetailsEvent__isset() : zoneId(false), roomId(false), capacityUpdated(false), capacity(false), roomDescriptionUpdated(false), roomDescription(false), roomNameUpdated(false), roomName(false), hasPassword(false), hasPasswordUpdated(false), hiddenUpdated(false), hidden(false) {}
  bool zoneId :1;
  bool roomId :1;
  bool capacityUpdated :1;
  bool capacity :1;
  bool roomDescriptionUpdated :1;
  bool roomDescription :1;
  bool roomNameUpdated :1;
  bool roomName :1;
  bool hasPassword :1;
  bool hasPasswordUpdated :1;
  bool hiddenUpdated :1;
  bool hidden :1;
} _ThriftUpdateRoomDetailsEvent__isset;

class ThriftUpdateRoomDetailsEvent {
 public:

  ThriftUpdateRoomDetailsEvent(const ThriftUpdateRoomDetailsEvent&);
  ThriftUpdateRoomDetailsEvent& operator=(const ThriftUpdateRoomDetailsEvent&);
  ThriftUpdateRoomDetailsEvent() : zoneId(0), roomId(0), capacityUpdated(0), capacity(0), roomDescriptionUpdated(0), roomDescription(), roomNameUpdated(0), roomName(), hasPassword(0), hasPasswordUpdated(0), hiddenUpdated(0), hidden(0) {
  }

  virtual ~ThriftUpdateRoomDetailsEvent() throw();
  int32_t zoneId;
  int32_t roomId;
  bool capacityUpdated;
  int32_t capacity;
  bool roomDescriptionUpdated;
  std::string roomDescription;
  bool roomNameUpdated;
  std::string roomName;
  bool hasPassword;
  bool hasPasswordUpdated;
  bool hiddenUpdated;
  bool hidden;

  _ThriftUpdateRoomDetailsEvent__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_capacityUpdated(const bool val);

  void __set_capacity(const int32_t val);

  void __set_roomDescriptionUpdated(const bool val);

  void __set_roomDescription(const std::string& val);

  void __set_roomNameUpdated(const bool val);

  void __set_roomName(const std::string& val);

  void __set_hasPassword(const bool val);

  void __set_hasPasswordUpdated(const bool val);

  void __set_hiddenUpdated(const bool val);

  void __set_hidden(const bool val);

  bool operator == (const ThriftUpdateRoomDetailsEvent & rhs) const
  {
    if (!(zoneId == rhs.zoneId))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    if (!(capacityUpdated == rhs.capacityUpdated))
      return false;
    if (!(capacity == rhs.capacity))
      return false;
    if (!(roomDescriptionUpdated == rhs.roomDescriptionUpdated))
      return false;
    if (!(roomDescription == rhs.roomDescription))
      return false;
    if (!(roomNameUpdated == rhs.roomNameUpdated))
      return false;
    if (!(roomName == rhs.roomName))
      return false;
    if (!(hasPassword == rhs.hasPassword))
      return false;
    if (!(hasPasswordUpdated == rhs.hasPasswordUpdated))
      return false;
    if (!(hiddenUpdated == rhs.hiddenUpdated))
      return false;
    if (!(hidden == rhs.hidden))
      return false;
    return true;
  }
  bool operator != (const ThriftUpdateRoomDetailsEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftUpdateRoomDetailsEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftUpdateRoomDetailsEvent &a, ThriftUpdateRoomDetailsEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftUpdateRoomDetailsEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
