/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftUpdateRoomDetailsRequest_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftUpdateRoomDetailsRequest::~ThriftUpdateRoomDetailsRequest() throw() {
}


void ThriftUpdateRoomDetailsRequest::__set_zoneId(const int32_t val) {
  this->zoneId = val;
}

void ThriftUpdateRoomDetailsRequest::__set_roomId(const int32_t val) {
  this->roomId = val;
}

void ThriftUpdateRoomDetailsRequest::__set_capacityUpdate(const bool val) {
  this->capacityUpdate = val;
}

void ThriftUpdateRoomDetailsRequest::__set_capacity(const int32_t val) {
  this->capacity = val;
}

void ThriftUpdateRoomDetailsRequest::__set_roomDescriptionUpdate(const bool val) {
  this->roomDescriptionUpdate = val;
}

void ThriftUpdateRoomDetailsRequest::__set_roomDescription(const std::string& val) {
  this->roomDescription = val;
}

void ThriftUpdateRoomDetailsRequest::__set_roomNameUpdate(const bool val) {
  this->roomNameUpdate = val;
}

void ThriftUpdateRoomDetailsRequest::__set_roomName(const std::string& val) {
  this->roomName = val;
}

void ThriftUpdateRoomDetailsRequest::__set_passwordUpdate(const bool val) {
  this->passwordUpdate = val;
}

void ThriftUpdateRoomDetailsRequest::__set_password(const std::string& val) {
  this->password = val;
}

void ThriftUpdateRoomDetailsRequest::__set_hiddenUpdate(const bool val) {
  this->hiddenUpdate = val;
}

void ThriftUpdateRoomDetailsRequest::__set_hidden(const bool val) {
  this->hidden = val;
}

uint32_t ThriftUpdateRoomDetailsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capacityUpdate);
          this->__isset.capacityUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->capacity);
          this->__isset.capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->roomDescriptionUpdate);
          this->__isset.roomDescriptionUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomDescription);
          this->__isset.roomDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->roomNameUpdate);
          this->__isset.roomNameUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomName);
          this->__isset.roomName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->passwordUpdate);
          this->__isset.passwordUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hiddenUpdate);
          this->__isset.hiddenUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hidden);
          this->__isset.hidden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftUpdateRoomDetailsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftUpdateRoomDetailsRequest");

  xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->zoneId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->roomId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capacityUpdate", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->capacityUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capacity", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomDescriptionUpdate", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->roomDescriptionUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomDescription", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->roomDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomNameUpdate", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->roomNameUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->roomName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwordUpdate", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->passwordUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hiddenUpdate", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->hiddenUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->hidden);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftUpdateRoomDetailsRequest &a, ThriftUpdateRoomDetailsRequest &b) {
  using ::std::swap;
  swap(a.zoneId, b.zoneId);
  swap(a.roomId, b.roomId);
  swap(a.capacityUpdate, b.capacityUpdate);
  swap(a.capacity, b.capacity);
  swap(a.roomDescriptionUpdate, b.roomDescriptionUpdate);
  swap(a.roomDescription, b.roomDescription);
  swap(a.roomNameUpdate, b.roomNameUpdate);
  swap(a.roomName, b.roomName);
  swap(a.passwordUpdate, b.passwordUpdate);
  swap(a.password, b.password);
  swap(a.hiddenUpdate, b.hiddenUpdate);
  swap(a.hidden, b.hidden);
  swap(a.__isset, b.__isset);
}

ThriftUpdateRoomDetailsRequest::ThriftUpdateRoomDetailsRequest(const ThriftUpdateRoomDetailsRequest& other0) {
  zoneId = other0.zoneId;
  roomId = other0.roomId;
  capacityUpdate = other0.capacityUpdate;
  capacity = other0.capacity;
  roomDescriptionUpdate = other0.roomDescriptionUpdate;
  roomDescription = other0.roomDescription;
  roomNameUpdate = other0.roomNameUpdate;
  roomName = other0.roomName;
  passwordUpdate = other0.passwordUpdate;
  password = other0.password;
  hiddenUpdate = other0.hiddenUpdate;
  hidden = other0.hidden;
  __isset = other0.__isset;
}
ThriftUpdateRoomDetailsRequest& ThriftUpdateRoomDetailsRequest::operator=(const ThriftUpdateRoomDetailsRequest& other1) {
  zoneId = other1.zoneId;
  roomId = other1.roomId;
  capacityUpdate = other1.capacityUpdate;
  capacity = other1.capacity;
  roomDescriptionUpdate = other1.roomDescriptionUpdate;
  roomDescription = other1.roomDescription;
  roomNameUpdate = other1.roomNameUpdate;
  roomName = other1.roomName;
  passwordUpdate = other1.passwordUpdate;
  password = other1.password;
  hiddenUpdate = other1.hiddenUpdate;
  hidden = other1.hidden;
  __isset = other1.__isset;
  return *this;
}
void ThriftUpdateRoomDetailsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftUpdateRoomDetailsRequest(";
  out << "zoneId=" << to_string(zoneId);
  out << ", " << "roomId=" << to_string(roomId);
  out << ", " << "capacityUpdate=" << to_string(capacityUpdate);
  out << ", " << "capacity=" << to_string(capacity);
  out << ", " << "roomDescriptionUpdate=" << to_string(roomDescriptionUpdate);
  out << ", " << "roomDescription=" << to_string(roomDescription);
  out << ", " << "roomNameUpdate=" << to_string(roomNameUpdate);
  out << ", " << "roomName=" << to_string(roomName);
  out << ", " << "passwordUpdate=" << to_string(passwordUpdate);
  out << ", " << "password=" << to_string(password);
  out << ", " << "hiddenUpdate=" << to_string(hiddenUpdate);
  out << ", " << "hidden=" << to_string(hidden);
  out << ")";
}

} // namespace
