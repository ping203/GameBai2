/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftUserEvictedFromRoomEvent_TYPES_H
#define ThriftUserEvictedFromRoomEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"
//
#include "libs/TProtocol.h"
#include "libs/TTransport.h"

//


namespace es {

class ThriftUserEvictedFromRoomEvent;

typedef struct _ThriftUserEvictedFromRoomEvent__isset {
  _ThriftUserEvictedFromRoomEvent__isset() : zoneId(false), roomId(false), userName(false), reason(false), ban(false), duration(false) {}
  bool zoneId :1;
  bool roomId :1;
  bool userName :1;
  bool reason :1;
  bool ban :1;
  bool duration :1;
} _ThriftUserEvictedFromRoomEvent__isset;

class ThriftUserEvictedFromRoomEvent {
 public:

  ThriftUserEvictedFromRoomEvent(const ThriftUserEvictedFromRoomEvent&);
  ThriftUserEvictedFromRoomEvent& operator=(const ThriftUserEvictedFromRoomEvent&);
  ThriftUserEvictedFromRoomEvent() : zoneId(0), roomId(0), userName(), reason(), ban(0), duration(0) {
  }

  virtual ~ThriftUserEvictedFromRoomEvent() throw();
  int32_t zoneId;
  int32_t roomId;
  std::string userName;
  std::string reason;
  bool ban;
  int32_t duration;

  _ThriftUserEvictedFromRoomEvent__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_userName(const std::string& val);

  void __set_reason(const std::string& val);

  void __set_ban(const bool val);

  void __set_duration(const int32_t val);

  bool operator == (const ThriftUserEvictedFromRoomEvent & rhs) const
  {
    if (__isset.zoneId != rhs.__isset.zoneId)
      return false;
    else if (__isset.zoneId && !(zoneId == rhs.zoneId))
      return false;
    if (__isset.roomId != rhs.__isset.roomId)
      return false;
    else if (__isset.roomId && !(roomId == rhs.roomId))
      return false;
    if (__isset.userName != rhs.__isset.userName)
      return false;
    else if (__isset.userName && !(userName == rhs.userName))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    if (__isset.ban != rhs.__isset.ban)
      return false;
    else if (__isset.ban && !(ban == rhs.ban))
      return false;
    if (__isset.duration != rhs.__isset.duration)
      return false;
    else if (__isset.duration && !(duration == rhs.duration))
      return false;
    return true;
  }
  bool operator != (const ThriftUserEvictedFromRoomEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftUserEvictedFromRoomEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftUserEvictedFromRoomEvent &a, ThriftUserEvictedFromRoomEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftUserEvictedFromRoomEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
