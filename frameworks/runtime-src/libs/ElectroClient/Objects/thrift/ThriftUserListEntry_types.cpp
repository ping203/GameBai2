/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftUserListEntry_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftUserListEntry::~ThriftUserListEntry() throw() {
}


void ThriftUserListEntry::__set_userName(const std::string& val) {
  this->userName = val;
__isset.userName = true;
}

void ThriftUserListEntry::__set_userVariables(const std::vector< ::es::ThriftUserVariable> & val) {
  this->userVariables = val;
__isset.userVariables = true;
}

void ThriftUserListEntry::__set_sendingVideo(const bool val) {
  this->sendingVideo = val;
__isset.sendingVideo = true;
}

void ThriftUserListEntry::__set_videoStreamName(const std::string& val) {
  this->videoStreamName = val;
__isset.videoStreamName = true;
}

void ThriftUserListEntry::__set_roomOperator(const bool val) {
  this->roomOperator = val;
__isset.roomOperator = true;
}

uint32_t ThriftUserListEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->userVariables.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->userVariables.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->userVariables[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.userVariables = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sendingVideo);
          this->__isset.sendingVideo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoStreamName);
          this->__isset.videoStreamName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->roomOperator);
          this->__isset.roomOperator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftUserListEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftUserListEntry");

  if (this->__isset.userName) {
    xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->userName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userVariables) {
    xfer += oprot->writeFieldBegin("userVariables", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->userVariables.size()));
      std::vector< ::es::ThriftUserVariable> ::const_iterator _iter5;
      for (_iter5 = this->userVariables.begin(); _iter5 != this->userVariables.end(); ++_iter5)
      {
        xfer += (*_iter5).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sendingVideo) {
    xfer += oprot->writeFieldBegin("sendingVideo", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->sendingVideo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.videoStreamName) {
    xfer += oprot->writeFieldBegin("videoStreamName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->videoStreamName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomOperator) {
    xfer += oprot->writeFieldBegin("roomOperator", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->roomOperator);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftUserListEntry &a, ThriftUserListEntry &b) {
  using ::std::swap;
  swap(a.userName, b.userName);
  swap(a.userVariables, b.userVariables);
  swap(a.sendingVideo, b.sendingVideo);
  swap(a.videoStreamName, b.videoStreamName);
  swap(a.roomOperator, b.roomOperator);
  swap(a.__isset, b.__isset);
}

ThriftUserListEntry::ThriftUserListEntry(const ThriftUserListEntry& other6) {
  userName = other6.userName;
  userVariables = other6.userVariables;
  sendingVideo = other6.sendingVideo;
  videoStreamName = other6.videoStreamName;
  roomOperator = other6.roomOperator;
  __isset = other6.__isset;
}
ThriftUserListEntry& ThriftUserListEntry::operator=(const ThriftUserListEntry& other7) {
  userName = other7.userName;
  userVariables = other7.userVariables;
  sendingVideo = other7.sendingVideo;
  videoStreamName = other7.videoStreamName;
  roomOperator = other7.roomOperator;
  __isset = other7.__isset;
  return *this;
}
void ThriftUserListEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftUserListEntry(";
  out << "userName="; (__isset.userName ? (out << to_string(userName)) : (out << "<null>"));
  out << ", " << "userVariables="; (__isset.userVariables ? (out << to_string(userVariables)) : (out << "<null>"));
  out << ", " << "sendingVideo="; (__isset.sendingVideo ? (out << to_string(sendingVideo)) : (out << "<null>"));
  out << ", " << "videoStreamName="; (__isset.videoStreamName ? (out << to_string(videoStreamName)) : (out << "<null>"));
  out << ", " << "roomOperator="; (__isset.roomOperator ? (out << to_string(roomOperator)) : (out << "<null>"));
  out << ")";
}

} // namespace
