/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftUserUpdateEvent_types.h"

#include <algorithm>
#include <ostream>

#include "libs/TToString.h"

namespace es {


ThriftUserUpdateEvent::~ThriftUserUpdateEvent() throw() {
}


void ThriftUserUpdateEvent::__set_zoneId(const int32_t val) {
  this->zoneId = val;
__isset.zoneId = true;
}

void ThriftUserUpdateEvent::__set_roomId(const int32_t val) {
  this->roomId = val;
__isset.roomId = true;
}

void ThriftUserUpdateEvent::__set_action(const  ::es::ThriftUserUpdateAction::type val) {
  this->action = val;
__isset.action = true;
}

void ThriftUserUpdateEvent::__set_userName(const std::string& val) {
  this->userName = val;
__isset.userName = true;
}

void ThriftUserUpdateEvent::__set_userVariables(const std::vector< ::es::ThriftUserVariable> & val) {
  this->userVariables = val;
__isset.userVariables = true;
}

void ThriftUserUpdateEvent::__set_sendingVideo(const bool val) {
  this->sendingVideo = val;
__isset.sendingVideo = true;
}

void ThriftUserUpdateEvent::__set_videoStreamName(const std::string& val) {
  this->videoStreamName = val;
__isset.videoStreamName = true;
}

uint32_t ThriftUserUpdateEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoneId);
          this->__isset.zoneId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roomId);
          this->__isset.roomId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->action = ( ::es::ThriftUserUpdateAction::type)ecast0;
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->userVariables.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->userVariables.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->userVariables[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.userVariables = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sendingVideo);
          this->__isset.sendingVideo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoStreamName);
          this->__isset.videoStreamName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftUserUpdateEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftUserUpdateEvent");

  if (this->__isset.zoneId) {
    xfer += oprot->writeFieldBegin("zoneId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->zoneId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomId) {
    xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->roomId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.action) {
    xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->action);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userName) {
    xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->userName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userVariables) {
    xfer += oprot->writeFieldBegin("userVariables", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->userVariables.size()));
      std::vector< ::es::ThriftUserVariable> ::const_iterator _iter6;
      for (_iter6 = this->userVariables.begin(); _iter6 != this->userVariables.end(); ++_iter6)
      {
        xfer += (*_iter6).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sendingVideo) {
    xfer += oprot->writeFieldBegin("sendingVideo", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->sendingVideo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.videoStreamName) {
    xfer += oprot->writeFieldBegin("videoStreamName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->videoStreamName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftUserUpdateEvent &a, ThriftUserUpdateEvent &b) {
  using ::std::swap;
  swap(a.zoneId, b.zoneId);
  swap(a.roomId, b.roomId);
  swap(a.action, b.action);
  swap(a.userName, b.userName);
  swap(a.userVariables, b.userVariables);
  swap(a.sendingVideo, b.sendingVideo);
  swap(a.videoStreamName, b.videoStreamName);
  swap(a.__isset, b.__isset);
}

ThriftUserUpdateEvent::ThriftUserUpdateEvent(const ThriftUserUpdateEvent& other7) {
  zoneId = other7.zoneId;
  roomId = other7.roomId;
  action = other7.action;
  userName = other7.userName;
  userVariables = other7.userVariables;
  sendingVideo = other7.sendingVideo;
  videoStreamName = other7.videoStreamName;
  __isset = other7.__isset;
}
ThriftUserUpdateEvent& ThriftUserUpdateEvent::operator=(const ThriftUserUpdateEvent& other8) {
  zoneId = other8.zoneId;
  roomId = other8.roomId;
  action = other8.action;
  userName = other8.userName;
  userVariables = other8.userVariables;
  sendingVideo = other8.sendingVideo;
  videoStreamName = other8.videoStreamName;
  __isset = other8.__isset;
  return *this;
}
void ThriftUserUpdateEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftUserUpdateEvent(";
  out << "zoneId="; (__isset.zoneId ? (out << to_string(zoneId)) : (out << "<null>"));
  out << ", " << "roomId="; (__isset.roomId ? (out << to_string(roomId)) : (out << "<null>"));
  out << ", " << "action="; (__isset.action ? (out << to_string(action)) : (out << "<null>"));
  out << ", " << "userName="; (__isset.userName ? (out << to_string(userName)) : (out << "<null>"));
  out << ", " << "userVariables="; (__isset.userVariables ? (out << to_string(userVariables)) : (out << "<null>"));
  out << ", " << "sendingVideo="; (__isset.sendingVideo ? (out << to_string(sendingVideo)) : (out << "<null>"));
  out << ", " << "videoStreamName="; (__isset.videoStreamName ? (out << to_string(videoStreamName)) : (out << "<null>"));
  out << ")";
}

} // namespace
