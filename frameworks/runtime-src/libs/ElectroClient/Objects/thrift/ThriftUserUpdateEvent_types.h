/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftUserUpdateEvent_TYPES_H
#define ThriftUserUpdateEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftUserUpdateAction_types.h"
#include "ThriftUserVariable_types.h"


namespace es {

class ThriftUserUpdateEvent;

typedef struct _ThriftUserUpdateEvent__isset {
  _ThriftUserUpdateEvent__isset() : zoneId(false), roomId(false), action(false), userName(false), userVariables(false), sendingVideo(false), videoStreamName(false) {}
  bool zoneId :1;
  bool roomId :1;
  bool action :1;
  bool userName :1;
  bool userVariables :1;
  bool sendingVideo :1;
  bool videoStreamName :1;
} _ThriftUserUpdateEvent__isset;

class ThriftUserUpdateEvent {
 public:

  ThriftUserUpdateEvent(const ThriftUserUpdateEvent&);
  ThriftUserUpdateEvent& operator=(const ThriftUserUpdateEvent&);
  ThriftUserUpdateEvent() : zoneId(0), roomId(0), action(( ::es::ThriftUserUpdateAction::type)0), userName(), sendingVideo(0), videoStreamName() {
  }

  virtual ~ThriftUserUpdateEvent() throw();
  int32_t zoneId;
  int32_t roomId;
   ::es::ThriftUserUpdateAction::type action;
  std::string userName;
  std::vector< ::es::ThriftUserVariable>  userVariables;
  bool sendingVideo;
  std::string videoStreamName;

  _ThriftUserUpdateEvent__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_roomId(const int32_t val);

  void __set_action(const  ::es::ThriftUserUpdateAction::type val);

  void __set_userName(const std::string& val);

  void __set_userVariables(const std::vector< ::es::ThriftUserVariable> & val);

  void __set_sendingVideo(const bool val);

  void __set_videoStreamName(const std::string& val);

  bool operator == (const ThriftUserUpdateEvent & rhs) const
  {
    if (__isset.zoneId != rhs.__isset.zoneId)
      return false;
    else if (__isset.zoneId && !(zoneId == rhs.zoneId))
      return false;
    if (__isset.roomId != rhs.__isset.roomId)
      return false;
    else if (__isset.roomId && !(roomId == rhs.roomId))
      return false;
    if (__isset.action != rhs.__isset.action)
      return false;
    else if (__isset.action && !(action == rhs.action))
      return false;
    if (__isset.userName != rhs.__isset.userName)
      return false;
    else if (__isset.userName && !(userName == rhs.userName))
      return false;
    if (__isset.userVariables != rhs.__isset.userVariables)
      return false;
    else if (__isset.userVariables && !(userVariables == rhs.userVariables))
      return false;
    if (__isset.sendingVideo != rhs.__isset.sendingVideo)
      return false;
    else if (__isset.sendingVideo && !(sendingVideo == rhs.sendingVideo))
      return false;
    if (__isset.videoStreamName != rhs.__isset.videoStreamName)
      return false;
    else if (__isset.videoStreamName && !(videoStreamName == rhs.videoStreamName))
      return false;
    return true;
  }
  bool operator != (const ThriftUserUpdateEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftUserUpdateEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftUserUpdateEvent &a, ThriftUserUpdateEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftUserUpdateEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
