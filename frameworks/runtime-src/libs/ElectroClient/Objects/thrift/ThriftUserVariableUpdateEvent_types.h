/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftUserVariableUpdateEvent_TYPES_H
#define ThriftUserVariableUpdateEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"
#include "ThriftUserVariable_types.h"
#include "ThriftUserVariableUpdateAction_types.h"


namespace es {

class ThriftUserVariableUpdateEvent;

typedef struct _ThriftUserVariableUpdateEvent__isset {
  _ThriftUserVariableUpdateEvent__isset() : userName(false), variable(false), action(false) {}
  bool userName :1;
  bool variable :1;
  bool action :1;
} _ThriftUserVariableUpdateEvent__isset;

class ThriftUserVariableUpdateEvent {
 public:

  ThriftUserVariableUpdateEvent(const ThriftUserVariableUpdateEvent&);
  ThriftUserVariableUpdateEvent& operator=(const ThriftUserVariableUpdateEvent&);
  ThriftUserVariableUpdateEvent() : userName(), action(( ::es::ThriftUserVariableUpdateAction::type)0) {
  }

  virtual ~ThriftUserVariableUpdateEvent() throw();
  std::string userName;
   ::es::ThriftUserVariable variable;
   ::es::ThriftUserVariableUpdateAction::type action;

  _ThriftUserVariableUpdateEvent__isset __isset;

  void __set_userName(const std::string& val);

  void __set_variable(const  ::es::ThriftUserVariable& val);

  void __set_action(const  ::es::ThriftUserVariableUpdateAction::type val);

  bool operator == (const ThriftUserVariableUpdateEvent & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(variable == rhs.variable))
      return false;
    if (!(action == rhs.action))
      return false;
    return true;
  }
  bool operator != (const ThriftUserVariableUpdateEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftUserVariableUpdateEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftUserVariableUpdateEvent &a, ThriftUserVariableUpdateEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftUserVariableUpdateEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
