/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftUserVariable_TYPES_H
#define ThriftUserVariable_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftFlattenedEsObject_types.h"


namespace es {

class ThriftUserVariable;

typedef struct _ThriftUserVariable__isset {
  _ThriftUserVariable__isset() : name(false), value(false) {}
  bool name :1;
  bool value :1;
} _ThriftUserVariable__isset;

class ThriftUserVariable {
 public:

  ThriftUserVariable(const ThriftUserVariable&);
  ThriftUserVariable& operator=(const ThriftUserVariable&);
  ThriftUserVariable() : name() {
  }

  virtual ~ThriftUserVariable() throw();
  std::string name;
   ::es::ThriftFlattenedEsObject value;

  _ThriftUserVariable__isset __isset;

  void __set_name(const std::string& val);

  void __set_value(const  ::es::ThriftFlattenedEsObject& val);

  bool operator == (const ThriftUserVariable & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftUserVariable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftUserVariable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftUserVariable &a, ThriftUserVariable &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftUserVariable& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
