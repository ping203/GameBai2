/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftValidateAdditionalLoginRequest_TYPES_H
#define ThriftValidateAdditionalLoginRequest_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"




namespace es {

class ThriftValidateAdditionalLoginRequest;

typedef struct _ThriftValidateAdditionalLoginRequest__isset {
  _ThriftValidateAdditionalLoginRequest__isset() : secret(false) {}
  bool secret :1;
} _ThriftValidateAdditionalLoginRequest__isset;

class ThriftValidateAdditionalLoginRequest {
 public:

  ThriftValidateAdditionalLoginRequest(const ThriftValidateAdditionalLoginRequest&);
  ThriftValidateAdditionalLoginRequest& operator=(const ThriftValidateAdditionalLoginRequest&);
  ThriftValidateAdditionalLoginRequest() : secret() {
  }

  virtual ~ThriftValidateAdditionalLoginRequest() throw();
  std::string secret;

  _ThriftValidateAdditionalLoginRequest__isset __isset;

  void __set_secret(const std::string& val);

  bool operator == (const ThriftValidateAdditionalLoginRequest & rhs) const
  {
    if (!(secret == rhs.secret))
      return false;
    return true;
  }
  bool operator != (const ThriftValidateAdditionalLoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftValidateAdditionalLoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftValidateAdditionalLoginRequest &a, ThriftValidateAdditionalLoginRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftValidateAdditionalLoginRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
