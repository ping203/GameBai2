/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftZoneUpdateEvent_TYPES_H
#define ThriftZoneUpdateEvent_TYPES_H

#include <iosfwd>

#include "libs/Thrift.h"

#include "libs/TProtocol.h"
#include "libs/TTransport.h"


#include "ThriftZoneUpdateAction_types.h"
#include "ThriftRoomListEntry_types.h"


namespace es {

class ThriftZoneUpdateEvent;

typedef struct _ThriftZoneUpdateEvent__isset {
  _ThriftZoneUpdateEvent__isset() : zoneId(false), action(false), roomId(false), roomCount(false), roomListEntry(false) {}
  bool zoneId :1;
  bool action :1;
  bool roomId :1;
  bool roomCount :1;
  bool roomListEntry :1;
} _ThriftZoneUpdateEvent__isset;

class ThriftZoneUpdateEvent {
 public:

  ThriftZoneUpdateEvent(const ThriftZoneUpdateEvent&);
  ThriftZoneUpdateEvent& operator=(const ThriftZoneUpdateEvent&);
  ThriftZoneUpdateEvent() : zoneId(0), action(( ::es::ThriftZoneUpdateAction::type)0), roomId(0), roomCount(0) {
  }

  virtual ~ThriftZoneUpdateEvent() throw();
  int32_t zoneId;
   ::es::ThriftZoneUpdateAction::type action;
  int32_t roomId;
  int32_t roomCount;
   ::es::ThriftRoomListEntry roomListEntry;

  _ThriftZoneUpdateEvent__isset __isset;

  void __set_zoneId(const int32_t val);

  void __set_action(const  ::es::ThriftZoneUpdateAction::type val);

  void __set_roomId(const int32_t val);

  void __set_roomCount(const int32_t val);

  void __set_roomListEntry(const  ::es::ThriftRoomListEntry& val);

  bool operator == (const ThriftZoneUpdateEvent & rhs) const
  {
    if (__isset.zoneId != rhs.__isset.zoneId)
      return false;
    else if (__isset.zoneId && !(zoneId == rhs.zoneId))
      return false;
    if (__isset.action != rhs.__isset.action)
      return false;
    else if (__isset.action && !(action == rhs.action))
      return false;
    if (__isset.roomId != rhs.__isset.roomId)
      return false;
    else if (__isset.roomId && !(roomId == rhs.roomId))
      return false;
    if (__isset.roomCount != rhs.__isset.roomCount)
      return false;
    else if (__isset.roomCount && !(roomCount == rhs.roomCount))
      return false;
    if (__isset.roomListEntry != rhs.__isset.roomListEntry)
      return false;
    else if (__isset.roomListEntry && !(roomListEntry == rhs.roomListEntry))
      return false;
    return true;
  }
  bool operator != (const ThriftZoneUpdateEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftZoneUpdateEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftZoneUpdateEvent &a, ThriftZoneUpdateEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftZoneUpdateEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
