apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.puppet.gamebai2"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')
    compile 'com.facebook.android:facebook-android-sdk:4.15.0'
    compile 'com.google.firebase:firebase-messaging:9.6.0'
}
apply plugin: 'com.google.gms.google-services'

task cleanAssets(type: Delete) {
    delete 'assets'
}
task copyAssets(type: Copy) {
    from('../../../cocos2d-x/cocos/scripting/js-bindings/') {
        include 'script/**'
    }
    from('../../../../') {
        //include 'res/**'
        include 'src/**'
        include 'main.js'
        include 'project.json'
    }
    into 'assets'
}

import org.apache.tools.ant.taskdefs.condition.Os
task buildNative << {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')
    if(!ndkDir){
        println 'ndk.dir not define, get NDK_ROOT from os variables';
        ndkDir = System.getenv("NDK_ROOT");
    }
    if(!ndkDir){
        println 'NDK_ROOT not define !!!';
        ndkDir = "";
        return;
    }
    println 'NDK_ROOT: '+ndkDir

    def projectDir = new File(System.getProperty("user.dir"));
    def projectAppDir = new File(projectDir, "app");
    println 'projectDir: ' + projectDir.getAbsolutePath();

    def rootDir = projectDir.getParentFile().getParentFile();
    println 'rootDir: ' + rootDir.getAbsolutePath();

    def engineDir = new File(rootDir, "cocos2d-x")
    println 'engineDir: ' + engineDir.getAbsolutePath();

    def externalDir = new File(engineDir, "external");
    println 'externalDir: ' + externalDir.getAbsolutePath();

    def cocosDir = new File(engineDir, "cocos");
    println 'cocosDir: ' + cocosDir.getAbsolutePath();

    def ndk_builder_file = null;
    if(Os.isFamily(Os.FAMILY_WINDOWS)){
        ndk_builder_file = new File(ndkDir, "ndk-build.cmd");
    }
    else{
        ndk_builder_file = new File(ndkDir, "ndk-build");
    }
    println 'ndk_builder_file: ' + ndk_builder_file;

    def TOOLCHAIN = "4.9"
    def DEBUG = 0
    def buid_thread = Runtime.getRuntime().availableProcessors();

    def command = [ndk_builder_file.getAbsolutePath(),
            "-j" + java.lang.Integer.toString(buid_thread),
            "-C",
            projectAppDir.getAbsolutePath(),
            "NDK_DEBUG=" + java.lang.Integer.toString(DEBUG),
            "NDK_TOOLCHAIN_VERSION=" + TOOLCHAIN,
            "NDK_MODULE_PATH=" + rootDir.getAbsolutePath() + ";" + engineDir.getAbsolutePath() + ";" + externalDir.getAbsolutePath() + ";" + cocosDir.getAbsolutePath()
    ];
    def process = new ProcessBuilder(command)
            .redirectErrorStream(true)
            .start()
    process.inputStream.eachLine {println it}
    process.waitFor();
}

clean.dependsOn cleanAssets
preBuild.dependsOn ("buildNative", "copyAssets")
