apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.puppet.gamebai2"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')
    compile 'com.facebook.android:facebook-android-sdk:4.15.0'
    compile 'com.google.firebase:firebase-messaging:9.6.0'
}
apply plugin: 'com.google.gms.google-services'

task cleanAssets(type: Delete) {
    delete 'assets'
}
task copyAssets(type: Copy) {
    from('../../../cocos2d-x/cocos/scripting/js-bindings/') {
        include 'script/**'
    }
    from('../../../../') {
        include 'res/**'
        include 'src/**'
        include 'main.js'
        include 'project.json'
    }
    into 'assets'
}

task buildNative << {
    def ndkDir = System.getenv("NDK_ROOT");
    println 'NDK_ROOT: '+ndkDir

    def pythonPath = new File(System.getProperty("user.dir"), "build_native.py")
    def command = ["python",pythonPath.getAbsolutePath(), "--ndkDir="+ndkDir]
    println "Python: " + pythonPath
    def process = new ProcessBuilder(command)
            .redirectErrorStream(true)
            .start()
    process.inputStream.eachLine {println it}
    process.waitFor();
}

clean.dependsOn cleanAssets
preBuild.dependsOn ("buildNative", "copyAssets")
